//P3 - Repeticiones Simples

/*1 - Moviendo tres veces al Norte:
Escribir un procedimiento Mover3VecesAlNorte() que mueva el cabezal tres posiciones al Norte de
la actual.*/
procedure Mover3VecesAlNorte {
    Mover(Norte)
    Mover(Norte)
    Mover(Norte)
}
/*2 - Moviendo tres veces al Este:
Escribir un procedimiento Mover3VecesAlEste() que mueva el cabezal tres posiciones al Este de la
actual.
a. ¿Qué similitudes encuentra entre este procedimiento y el anterior?
b. ¿Qué cambiaría si quisiera hacer un procedimiento que mueva tres veces al Oeste, o tres al
Sur?*/

procedure Mover3VecesAlEste() {
    Mover(Este)
    Mover(Este)
    Mover(Este)
}

/*3. Y Ahora para algo completamente distinto:
Escribir un procedimiento Poner6DeColorNegro() que ponga 6 bolitas de color Negro en la celda
actual.*/

procedure Poner6DeColorNegro() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    Poner(Negro)
    Poner(Negro)
    Poner(Negro)
    Poner(Negro)
    Poner(Negro)
    Poner(Negro)
}

/*4 - ...y 6 Verdes
Escribir un procedimiento Poner6DeColorVerde() que ponga 6 bolitas de color Verde en la celda
actual.*/
procedure Poner6DeColorVerde() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    Poner(Verde)
    Poner(Verde)
    Poner(Verde)
    Poner(Verde)
    Poner(Verde)
    Poner(Verde)
}

/*5 - Dibujando un rectangulo con repeticiones:
Escribir un procedimiento DibujarRectánguloRojoYNegroDe5x3() que dibuje un rectangulo
sólido de 5 celdas de largo por 3 de alto, símilar al realizado en “P2. 2. Por Arriba” , pero esta vez, utilice
repetición para solucionar el problema.*/

program {
    DibujarRectánguloRojoYNegroDe5x3()
    RegresarAInicio()
}

procedure DibujarRectánguloRojoYNegroDe5x3() {
    /*
        PROPÓSITO: Poner un rectángulo sólido de 5 celdas de ancho y 3 celdas de alto, en la que cada celda tenga una bolita de color Rojo y una de color Negro. El cabezal comienza y termina en el vértice inferior izquierda del mismo.
        PARÁMETROS:
            * -
        PRECONDICIONES:
            * Hay al menos 4 celdas al Este y 2 celdas al Norte de la celda actual.
    */

    DibujarLíneaRojaYNegraDeTamaño5()
    Mover4VecesAlOeste()
    Mover(Norte)
    DibujarLíneaRojaYNegraDeTamaño5()
    Mover4VecesAlOeste()
    Mover(Norte)
    DibujarLíneaRojaYNegraDeTamaño5()
    Mover4VecesAlOeste()
}

/*b) Escribir el procedimiento DibujarLíneaRojaYNegraDeTamaño5() que quedó pendiente del ítem anterior.
Para ello, se debe seguir la misma metodología que en el caso anterior: en primer lugar pensar una estrategia, luego definir los contratos de los procedimientos que expresan las subtareas, y por último codificar el procedimiento pedido usando dichas subtareas (sin su código). Se sugiere que la estrategia involucre a subtareas llamadas PonerUnaNegraYUnaRoja() y Mover4VecesAlOeste().*/

procedure DibujarLíneaRojaYNegraDeTamaño5() {
    repeat(4){
        PonerUnaNegraYUnaRoja()
        Mover(Este)
    }
    PonerUnaNegraYUnaRoja()
}

/*c) Escribir los procedimientos PonerUnaNegraYUnaRoja() y Mover4VecesAlOeste() que quedaron pendientes del ejercicio anterior. En este caso, los procedimientos se pueden expresar fácilmente utilizando comandos primitivos, por lo que no es necesario comenzar pensando en posibles subtareas.*/
procedure PonerUnaNegraYUnaRoja() {
    Poner(Rojo)
    Poner(Negro)
}

procedure Mover4VecesAlOeste() {
    repeat(4){
        Mover(Oeste)
    }
}

procedure RegresarAInicio() {
    IrAlBorde(Oeste)
    IrAlBorde(Sur)
}

/*6 - Pintando el tablero:
Escribir un procedimiento PintarElTableroDeAzul() que, asumiendo que el tablero tiene 10
celdas de largo y 7 celdas de alto, pinte absolutamente todo el tablero con bolitas azules, dejando
exactamente una bolita azul en cada celda.

Importante Recuerde que la estrategia de solución debe quedar clara a partir de la lectura del código.
Use subtareas con nombres apropiados para dicho objetivo.*/

program {
    PintarElTableroDeAzul()
}

procedure PintarElTableroDeAzul() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    repeat(6){
    PonerLineaAzul()
    Mover(Norte)    
    }
    PonerLineaAzul()
    VolverAlInicioDelTablero()
}

procedure PonerLineaAzul() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    repeat(9){
        Poner(Azul)
        Mover(Este)
    }
    Poner(Azul)
    VolverAlInicioDeLaLinea()
}

procedure VolverAlInicioDeLaLinea() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    repeat(9){
        Mover(Oeste)
    }
}

procedure VolverAlInicioDelTablero(){
    repeat(6){
        Mover(Sur)
    }
}