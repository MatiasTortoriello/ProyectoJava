//Ejercicio 1

procedure ComerPiezaNegraConTorreHacia_(direccion) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    SacarTorre()
    IrALaPiezaNegraMasCercanaAl_(direccion)
    ComerPiezaAl_(direccion)
}

procedure IrALaPiezaNegraMasCercanaAl_(direccion) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    while(not hayPiezaNegraAl_(direccion) && puedeMover(direccion)){

    }
}

procedure ComerPiezaAca() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    
}

///////////////////////////////////////////////////////////////////////////////////////////////

//Ejercicio 2

procedure MoverCaballoHaciaEl_Y_SiEsPosible(direccion1, direccion2) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    if (puedeMoverCaballoAl_Y_(direccion1, direccion2) && not hayPiezaAl_YAl_(direccion1, direccion2)){
        MoverCaballoAl_Y_(direccion1, direccion2)
    }
    
}

function puedeMoverCaballoAl_Y_(direccion1, direccion2) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */
    
    return (puedeMover(direccion2) && puedeMover2Al_(direccion1))
}