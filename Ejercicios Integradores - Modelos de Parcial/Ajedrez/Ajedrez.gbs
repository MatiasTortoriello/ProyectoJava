//Ejercicio 1

procedure ComerPiezaNegraConTorreHacia_(direccion) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    SacarTorre()
    IrALaPiezaNegraMasCercanaAl_(direccion)
    ComerPiezaAl_(direccion)
}

procedure IrALaPiezaNegraMasCercanaAl_(direccion) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    while(not hayPiezaNegraAl_(direccion) && puedeMover(direccion)){

    }
}

procedure ComerPiezaAca() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    
}

///////////////////////////////////////////////////////////////////////////////////////////////

//Ejercicio 2

procedure MoverCaballoHaciaEl_Y_SiEsPosible(direccion1, direccion2) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    if (puedeMoverCaballoAl_Y_(direccion1, direccion2) && not hayPiezaAl_YAl_(direccion1, direccion2)){
        MoverCaballoAl_Y_(direccion1, direccion2)
    }
    
}

function puedeMoverCaballoAl_Y_(direccion1, direccion2) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */
    
    return (puedeMover(direccion2) && puedeMover2Al_(direccion1))
}


function puedeMover2Al_(direccion) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */
    return (puedeMover(direccion) && puedeMoverSiguienteAl_(direccion)) //Chequea si puede mover y luego si puede mover a la siguiente
}

function puedeMoverSiguienteAl_(direccion) {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */
    Mover(direccion)
    return (puedeMover(direccion)) //Mueve y luego verifica
}

///////////////////////////////////////////////////////////

function hayDiagonalLibre(){
    return(hayDiagonalAl_YAl_(Norte, Este) || hayDiagonalLibreAl_YAl_(Sur, Este))
}

function hayDiagonalLibreAl_YAl_(dir1, dir2){
    IrAPrincipioDeDiagonal(dir1, dir2)
    while(haySiguienteCeldaDiagonalAl_YAl_(dir1, dir2) && esUbicacionLibre() ){
        IrSiguienteCeldaDiagonalAl_YAl(dir1, dir2)
    }
    
    return(esUbicacionLibre())
}

procedure IrAPrincipioDeDiagonal(dir1, dir2){
    IrAlBorde(opuesto(dir1))
    IrAlBorde(opuesto(dir2))
}

function esUbicacionLibre() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */
    
    return (not hayPiezaAca())
}

function hayPiezaAca(){
    return(not esVacia())
}

////////////////////////////

function cantidadDeMovimientosDeEsteReySinComer(){
    direccionActual := minDir()
    cantidadDeMovimientosPosibles := 0
    while(direccionActual /= maxDir()){
        cantidadDeMovimientosPosibles := cantidadDeMovimientosPosibles + unoSi_CeroSiNo(hayCeldaLibreAl_(direccionActual)) + unoSi_CeroSiNo(hayCeldaLibreAlSiguienteDe_())
        direccionActual := siguiente(direccionActual)
    }
    cantidadDeMovimientosPosibles := cantidadDeMovimientosPosibles + unoSi_CeroSiNo(hayCeldaLibreAl_(direccionActual)) + unoSi_CeroSiNo(hayCeldaLibreAlSiguienteDe_())
        direccionActual := siguiente(direccionActual)

    return(cantidadDeMovimientosPosibles)
}

function hayCeldaLibreAlSiguienteDe_(direccion){
    return(puedeMoverDiagonal(direccion, siguiente(direccion) && esUbicacionLibreEnDiagonal(direccion, siguiente(direccion)))
}

function puedeMoverDiagonal(direccion, sigDireccion){
    return(puedeMover(direccion), puedeMover(sigDireccion))
}

function hayCeldaLibreAl_(direccion){
    return(puedeMover(direccion) && esUbicacionLibreAl_(direccion))
}

function esUbicacionLibreAl_(direccion){
    Mover(direccion)
    return(esUbicacionLibre())
}

