/*Ejercicio 1 - Días de la semana:
 
Declarar un tipo variante llamado DíaDeLaSemana, que sirva para identificar los días de la semana. Luego implementar las siguientes funciones (sin olvidar sus contratos): 
 
a) díaSiguiente_ que dado un día de la semana, devuelve el día siguiente. 
b) díaPrevio_ que dado un día de la semana, devuelve el día previo. 
c) esDíaDeFinDeSemana_, que indica si el día dado es uno del fin de semana. 
 
Reflexionamos: ¿De qué tipo es el parámetro dado a cada una de estas funciones? ¿Cuál sería un buen nombre para el mismo? ¿Por qué las funciones siguiente y previo no pueden utilizarse para solucionar este problema? ¿Qué beneficios trae tener ahora díaSiguiente y díaPrevio sí necesito saber algo cómo “en qué día ocurrió un suceso”?*/

type DiaDeLaSemana is record{
    field nombreDelDia
}

type nombreDelDia is variant {
    case Lunes{}
    case Martes{}
    case Miercoles{}
    case Jueves{}
    case Viernes{}
    case Sabado{}
    case Domingo{}
}



























//Ejercicio 1:

type DiaDeLaSemana is record {
    field nombreDelDia //String
}

type nombreDelDia is variant {
    /*Propósito: Modelar un día de la semana
    */
    case Lunes{}
    case Martes{}
    case Miercoles{}
    case Jueves{}
    case Viernes{}
    case Sabado{}
    case Domingo{}
}

function diaSiguiente_(diaActual){
    return(
        choose 
            Lunes when (diaActual == Domingo)
            Martes when (diaActual == Lunes)
            Miercoles when (diaActual == Martes)
            Jueves when (diaActual == Miercoles)
            Viernes when (diaActual == Jueves)
            Sabado when (diaActual == Viernes)
            Domingo otherwise
    )
}   

function diaPrevio_(diaActual){
    return (
        choose 
            Lunes when (diaActual == Martes)
            Martes when (diaActual == Miercoles)
            Miercoles when (diaActual == Jueves)
            Jueves when (diaActual == Viernes)
            Viernes when (diaActual == Sabado)
            Sabado when (diaActual == Domingo)
            Domingo otherwise
    )
}   

function esDiaDeFinDeSemana_(diaActual){
    return (diaActual == Sabado || diaActual == Domingo)
}

// Ejercicio 2

type PartidoPolitico is record {
    field nombreDelPartido
    field cantidadDeVotos
}

type nombreDelPartido is variant {
    case Democracia por la Verdad
    case Unidos por la Republica
    case Libertarios por la Libertad
    case Izquierda de los Obreros
}

function cantidadDeVotosDe_(unPartido){
    return (unPartido <- cantidadDeVotos)
}

function tieneMasVotantes_Que_(primerPartidoPolitico, segundoPartidoPolitico){
    return (cantidadDeVotosDe_(primerPartidoPolitico) > cantidadDeVotosDe_(segundoPartidoPolitico)
}

function elQueTieneMasVotos(){
    return(
        choose 
            //elPartido_TieneMasVotosQueLosDemas(unPartido)
        )
}

function habraBallotage(){
    /*
     -El partido mas votado
     -Cantidad de votos totales
     -El segundo más votado (**)
    */
    
}
//Apuntes clase 29-5

//Variantes y registros

//Ejercicio 3




type Carta is record{
    /*
    Prop.:
    Inv.De Rep.:  El campo numero tiene que estar comprendido entre 1 y 12
    */
    field palo     // Palo
    field numero  //Numero
}

type Palo is variant {
    
    case Basto{}
    case Copa{}
    case Oro{}
    case Espada{}
    
}

function anchoDeEspadas(){
    /*Prop: Describe el 1 de espadas
    Prec: Ninguna
    Param: No
    Tipo: Carta
    */
    
    return(
        Carta(//Esto es un constructor
            numero <- 1,
            palo <- Espada
            )
        )
} 


//Y ahora viene la funcion constructora
function laCarta_de_(numeroDeLaCarta, paloDeLaCarta){
    /* 
    Prop: Describe la carta *numeroDeLaCarta* de *paloDeLaCarta*
    Prec: *numeroDeCarta* debe estar comprendido entre 1 y 12
    Param: 
        -*numeroDeLaCarta*: Numero.
        -*paloDeLaCarta*: Palo.
    Tipo: Carta
    
    */
    return(
        Carta(//Esto es un constructor
        numero <- numeroDeLaCarta,
        palo <- paloDeLaCarta
        )
    )
}


//Funciones observadoras: Cuando declaro un tipo record, los campos son las funciones observadoras. Func. que inspeccionan ese registro que se le coloque
// Ej: palo(anchoDeEspadas()) ---> Devuelve 1

//Dif entre constructor y funcion constructora: 
//A la segunda vos le das parametros y la funcion construye a traves de un constructor. 
//Para el segundo se utiliza la palabra que hayas elegido para el registro.

function valorParaEnvidoDe_(){
    //20 + valor de las cartas. Excepto 10, 11 y 12, que es 0 (otherwise)
}

function mayorValorEntre_Y_(){
    //Mayor valor que aporta para el envido
}

// Ejercicio de Celdas

type Celda is record { 
    /*Inv: Todos los números son >= a 0*/
    field cantidadDeAzules //Numero
    field cantidadDeNegras //Numero
    field cantidadDeVerdes //Numero
    field cantidadDeRojas //Numero
}

function celdaActual(){
    /* Prop: Describe la Celda correspondiente a la actual en términos de registro. Con datos de la ubicación actual.
        Prec: Ninguna
        Param: -
        Tipo: Celda    
    */

    return (
        Celda(
            cantidadDeAzules <- nroBolitas(Azul) //Numero
            cantidadDeNegras <- nroBolitas(Negro)//Numero
            cantidadDeVerdes <- nroBolitas(Verde)//Numero
            cantidadDeRojas <- nroBolitas(Rojo)//Numero
            )
            
        )
}

procedure EscribirEnCelda_(unaCelda){
    Poner_DeColor_(cantidadDeAzules(unaCelda), Azul)
    Poner_DeColor_(cantidadDeNegras(unaCelda), Negro)
    Poner_DeColor_(cantidadDeRojas(unaCelda), Rojo)
    Poner_DeColor_(cantidadDeVerdes(unaCelda), Verde)
}

function celdaEscalera(){
    return(
        Celda (
            cantidadDeAzules <- 1 //Numero
            cantidadDeNegras <- 2//Numero
            cantidadDeRojas <- 3//Numero
            cantidadDeVerdes <- 4//Numero
            )
    )
}

function tieneMismaCantidadDeRojas_Y_(celdaUno, celdaDos){
    return(cantidadDeRojas(celdaUno) == cantidadDeRojas(celdaDos))
}

//Ejercicio 5:

type Persona is record {
    /*Prop: Modelar una persona
    Invariante de representación: - */
    field dni //Numero
    field domicilio //String
    field esDonante //Boolean
    
}

function unaPersona(){
    return (Persona (numeroDni <- 12345677, domicilio <- "Calle falsa 123", esDonante <- True)
}

function sonConvivientes_Y_(personaUno, personaDos){
    return(domicilio(personaUno) == domicilio(personaDos))
}

function personaNacidaDe_(madreDePersona){
    return(
        unaNuevaPersona(sinAsignar(), domicilio(madreDePersona), False)
        //Otra forma -> Persona(unaMadre | numeroDni <- sinAsignar())
    )
}

function unaNuevaPersona(dniDePersona, domicilioDePersona, esDonante){
    return(
        Persona (
            numeroDni <- dniDePersona, 
            domicilio <- domicilioDePersona, 
            esDonante <- esDonante
            )
        )
}


function sinAsignar(){
    
}

//Ejercicio 6: 

type Empleado is record {
    field identidad //persona
    field puesto //puesto
    field 
}

type Puesto is variant {
    case GestorDeProyecto{}
    case LiderDeProyecto
}
