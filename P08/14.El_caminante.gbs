//caminante = bolita Azul
//indicador = bolita verde
//meta=bolitas rojo
// huella = bolitas negras

function colorCaminante(){
    /*proposito:describe el color del caminante.
    *precon:ninguna
    *tipo:color
    */
    return(Azul)
}
function colorIndicador(){
    /*proposito:describe el color del Indicador.
    *precon:ninguna
    *tipo:color
    */
    return(Verde)
}

function colorMeta(){
    /*proposito:describe el color de la Meta.
    *precon:ninguna
    *tipo:color
    */
    return(Rojo)
}
function colorHuella(){
    /*proposito:describe el color de la Huella.
    *precon:ninguna
    *tipo:color
    */
    return(Negro)
}

procedure LlevarCaminanteAlaMeta(){
    /*prop:llevar al caminante a la meta .
    *prec:
          *el tablero representa un escenario valido para el caminante.
          *debe estar el cabezal sobre el caminante.
          *debe haber una meta en el tablero.
          *debe haber indicadores desde la celda actual hasata la meta.
          *todas las celdas tienen un max de 4 bolitas verdes.
    */
    while(not estaEnLaMeta()){
        DejarHuella()
        DarUnPaso()
    }
}

function estaEnLaMeta(){
   /*prop:indica si el caminante esta sobre la meta.
   *preco:ninguna.
   *tipo:booleano
   */
   return(hayBolitas(colorMeta()))
}
procedure DejarHuella(){
    /*prop:dejar una huella en la ubicacion actual.
    *prec:ninguna.
    */
    Poner(colorHuella())
}

procedure DarUnPaso(){
    /* prop:da un paso hacia la meta.
    *prec:ninguna.
    * obser:*si esta posicionado sobre una celda indicadora 
        el camninante cambia la direccion
    */
    CambiarDeDireccionSiHayIndicador()
    MoverAlCaminanteHaciaDondeMira()
}
procedure CambiarDeDireccionSiHayIndicador(){
    /*prop:cambia de direccion si hay un indicador.
    *prec:ninguna.
    */
    if (hayIndicadorDeCambioDeDirecci贸n()){
        CambiarDirecci贸nDelCaminanteALaDelIndicador()
    }
}

function hayIndicadorDeCambioDeDirecci贸n(){
    /*prop:indica si hay un indicador de cambio de direccion .
    * prec:ninguna
    tipo:booleano.
    */
    return(hayBolitas(colorIndicador()))
}

procedure CambiarDirecci贸nDelCaminanteALaDelIndicador(){
    /*prop:cambia de direccion del caminante segun el indicador.
    *prec:
          * debe haber indicador en la celda actual.
    */
    Cambiar_ParaImitar_(colorCaminante(),colorIndicador())
    
}
procedure Cambiar_ParaImitar_(colorACambiar,colorAImitar){
    /*prop:cambia la cantidad de bolitas del color*colorACambiar* por color *colorAImitar*
    *prec:
         *debe haber un color a cambiar.
    parametros: 
               *colorACambiar:Color-color a cambiar.
               *colorAImitar :Color-color a imitar.
    */
    Sacar_DeColor_(nroBolitas(colorACambiar),colorACambiar)
    Poner_DeColor_(nroBolitas(colorAImitar),colorACambiar)
}
procedure MoverAlCaminanteHaciaDondeMira(){
    /*prop:mueve al caminante hacia la direccion a donde mira.
    *prec:
          * debe haber una celda hacia donde se debe mover el caminante.
          *el cabezal debe estar sobre el caminante.
    */
    MoverAlCaminanteAl_(direccion)
}
function direccionAlAQueMira(){
    /*prop:describir la direccion a la que mira el caminante.
    *preco:
           *el cabezal debe estar en sobre el caminante.
    tipo:direccion.
    */
    return(direccionDelCodigo(codigoDelCaminante()))
}

function codigoDelCaminante(){
    /*prop:describe el codigo del caminante.
    *prec:
         *el cabezal debe estar en sobre el caminante.
    *TIPO:Numero.
    */
    return(nroBolitas(colorCaminante()))
}
procedure Mover_Bolitas_Al_(cantidad,color,direccion){
    /*prop:mueve la cantidad*cantidad* de bolitas de color *color* 
        a la celda lindante en la direccion dada.el cabezal termina en dicha celda.
    *prec:
          * debe haber una celda lindante en direccion*direccion*.
          * debe haber al menos la cantidad de bolitas de color *color*  a mover.
    *parametros:
                *cantidad:Numero-cantidad de bolitas .
                *color:Color- color de la bolita.
                *direccion:Direccion - direccion a mover.
    */
    Sacar_DeColor_(cantidad,color)
    Mover(direccion)
    Poner_DeColor_(cantidad,color)
}




    
    
    
    
    
    
    
    
