
//ejercicio de Nova
procedure P(p){ 
    /*
    PROPÓSITO: pone **p** más uno bolitas azules
    PRECONDICIONES:
        *Ninguna
    */
  
    Poner__Veces(Azul, p+1) 
}

procedure Poner__Veces(color,cantidad) {
    repeat(cantidad){
        Poner(color)
    }
}
procedure Mover__Veces(dirección,cantidad) {
    repeat(cantidad){
        Mover(dirección)
    }
}
procedure Q(p) {
    if(p /= 3) {    
        v := 3
    }
    Poner__Veces(Azul, v)
    } 

procedure R(){ 
    
    Poner__Veces(Azul, v) 
    Mover__Veces(Este, v) 
}

procedure S(p) {
    v := Este
    Mover__Veces(v, 5)
    v := Norte
    Mover__Veces(v, 2)
}

function jugadaGanadoraDePiedraPapelOTijerasEntre_Y_(jugada1, jugada2){
    /*
    Propósito: Describe la jugada ganadora entre las jugadas **jugada1** y **jugada2**
    Parámetros:
        *jugada1: String - El tipo de jugada
        *jugada2: String - El tipo de jugada
    Precondiciones:
        *jugada1 y jugada2 pueden ser: "Piedra", "Papel" o "Tijeras"
    Tipo: String
    */
    return(
        choose
            jugada1 when (jugada1=="Piedra" && jugada2 =="Tijeras" 
                        ||jugada1=="Tijeras" && jugada2 =="Papel"
                        ||jugada1=="Papel" && jugada2 =="Piedra")
            "Empate" when (jugada1==jugada2)
            jugada2 otherwise
        )
}
function nroBolitas_EnLaFilaActual (color){
    /*
    propósito: Describe la cantidad de bolitas del color **color** de la fila actual
    parámetros:
        *color: Color - El color de las bolitas a contar
    Precondiciones:
        *ninguna
    Tipo: Número
    */
    IrAlBorde(Oeste)
    cantidadBolitas := nroBolitas(color)
    while(puedeMover(Este)){
        Mover(Este)
        cantidadBolitas := cantidadBolitas + nroBolitas(color)
    }
    return(cantidadBolitas)
}
function cantidadTotalDeÁrbolesEnElTerreno(){
    /*
    propósito: Describe la cantidad de árboles que hay en el bosque
    precondiciones:
        *Ninguna
    tipo: Número
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Sur, Oeste)
    cantidadÁrboles := 0
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Sur, Oeste)){
        cantidadÁrboles := cantidadÁrboles + cantidadÁrbolesAcá()
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Sur, Oeste)
    }
    return(cantidadÁrboles+cantidadÁrbolesAcá())
    
    
}
program{
   
    return(nroBolitas_EnLaFilaActual(Verde))
}




