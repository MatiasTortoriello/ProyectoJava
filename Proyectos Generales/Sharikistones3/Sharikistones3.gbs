//Ejercicio 1

procedure RemoverObstaculoEnElVertice(){
    /*PROPÓSITO: Remueve un obstáculo en un vértice determinado
      PRECONDICIONES: - */
 if(estaEnUnVertice()){
    RemoverObstaculoAqui()
 }
}

function estaEnUnVertice(){
    /*  PROPÓSITO: Determina si el cabezal se encuentra en un vértice
        TIPO: Tipo
        PRECONDICIONES: - */

    celdaEnVertice := false
    
    if(esVerticeSurOeste() || 
       esVerticeSurEste()  || 
       esVerticeNorOeste() || 
       esVerticeNorEste()  ){
        celdaEnVertice := true
 }
 return(celdaEnVertice)
}

function esVerticeSurOeste() {
    /*
        PROPÓSITO:  Determina si el cabezal se encuentra en el vértice SurOeste
        TIPO: Dirección
        PRECONDICIONES: -
    */

    EsVerticeSurOeste := false

    if(not puedeMover(Sur) && not puedeMover(Oeste)){
        EsVerticeSurOeste := true
    }
    
    return (EsVerticeSurOeste)
}

function esVerticeSurEste() {
    /*
        PROPÓSITO:  Determina si el cabezal se encuentra en el vértice SurEste
        TIPO: Dirección
        PRECONDICIONES: -
    */

    EsVerticeSurEste := false

    if(not puedeMover(Sur) && not puedeMover(Este)){
        EsVerticeSurEste := true
    }
    
    return (EsVerticeSurEste)
}

function esVerticeNorOeste() {
    /*
        PROPÓSITO:  Determina si el cabezal se encuentra en el vértice NorOeste
        TIPO: Dirección
        PRECONDICIONES: -
    */

    EsVerticeSurOeste := false

    if(notpuedeMover(Sur) && not puedeMover(Oeste)){
        EsVerticeSurOeste := true
    }
    
    return (EsVerticeSurOeste)
}

function esVerticeNorEste() {
    /*
        PROPÓSITO:  Determina si el cabezal se encuentra en el vértice NorEste
        TIPO: Dirección
        PRECONDICIONES: -
    */

    EsVerticeSurOeste := false

    if(not puedeMover(Sur) && not puedeMover(Oeste)){
        EsVerticeSurOeste := true
    }
    
    return (EsVerticeSurOeste)
}

procedure RemoverObstaculoAqui() {
    /*
        PROPÓSITO:  Remueve un obstáculo en la posición actual en el caso de que exista uno
        PRECONDICIONES: -
    */
    if(hayObstaculoAqui()){
    repeat(2){
        Sacar(Negro)
    }
    }
    
}

function hayObstaculoAqui() {
    /*  PROPÓSITO:  Determina si en la posición actual existe un obstáculo
        TIPO: Boolean
        PRECONDICIONES: -  */
    
    hayObstaculo := false
    if(nroBolitas(Negro) == 2){
        hayObstaculo := true
    }
    return (hayObstaculo)
}


//Ejercicio 2

procedure RodearFichaAqui(){
    /*PROPÓSITO: Rodea una ficha de obstáculos en sus direcciones ortogonales siempre y cuando haya lugar en dichas direcciones.
      PRECONDICIONES: Ninguna*/
    ColocarObstaculoAl_SiHayLugar(Norte)
    ColocarObstaculoAl_SiHayLugar(Sur)
    ColocarObstaculoAl_SiHayLugar(Este)
    ColocarObstaculoAl_SiHayLugar(Oeste)   
}

procedure ColocarObstaculoAl_SiHayLugar(direccion) {
    /*  PROPÓSITO: Coloca un obstaculo al *direccion*
        PARÁMETROS:
            * direccion: Dirección. Indica la dirección a la que se debe colocar el obstáculo.
        PRECONDICIONES: Debe haber una celda lindante al *direccion*.*/
    if(puedeMover(direccion)){
        ColocarObstaculoAl_(direccion)
    }
    Mover(opuesto(direccion))
}

procedure ColocarObstaculoAl_(direccion){
    Mover(direccion)
    PonerObstaculoAqui()
}

procedure PonerObstaculoAqui() {
    /*  PROPÓSITO:  Vacía la celda actual y le coloca un obstáculo
        PRECONDICIONES: - */
    VaciarCelda()
    repeat(2){
        Poner(Negro)
    }
}

