//Ejercicio 1

procedure RemoverObstaculoEnElVertice(){
 if(estaEnUnVertice()){
    RemoverObstaculoAqui()
 }
}

function estaEnUnVertice(){
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */

    celdaEnVertice := false
    
    if(esVerticeSurOeste() || 
    esVerticeSurEste()  || 
    esVerticeNorOeste() || 
    esVerticeNorEste()  ){
        celdaEnVertice := true
 }
 return(celdaEnVertice)
}

function esVerticeSurOeste() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */

    EsVerticeSurOeste := false

    if(not puedeMover(Sur) && not puedeMover(Oeste)){
        EsVerticeSurOeste := true
    }
    
    return (EsVerticeSurOeste)
}

function esVerticeSurEste() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */

    EsVerticeSurEste := false

    if(not puedeMover(Sur) && not puedeMover(Este)){
        EsVerticeSurEste := true
    }
    
    return (EsVerticeSurEste)
}

function esVerticeNorOeste() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */

    EsVerticeSurOeste := false

    if(notpuedeMover(Sur) && not puedeMover(Oeste)){
        EsVerticeSurOeste := true
    }
    
    return (EsVerticeSurOeste)
}

function esVerticeNorEste() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */

    EsVerticeSurOeste := false

    if(not puedeMover(Sur) && not puedeMover(Oeste)){
        EsVerticeSurOeste := true
    }
    
    return (EsVerticeSurOeste)
}

procedure RemoverObstaculoAqui() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    repeat(2){
        Sacar(Negro)
    }
    
}


//Ejercicio 2

procedure RodearFichaAqui(){
    
}