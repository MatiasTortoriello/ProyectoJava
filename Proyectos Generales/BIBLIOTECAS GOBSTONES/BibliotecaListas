//Longitud

function longitudDe_(unaLista){
    restoLista := unaLista
    cantidad := 0 
    while(not esVacia(restoLista)){
        cantidad := cantidad + 1
        restoLista := resto(restoLista)
    }
    return(cantidad)
}

//Ejercicio 14

function reversoDe_(unaLista){
     listaInvertida := []
     listaExistente := unaLista
    while (not esVacía(listaExistente)) {
         listaInvertida := [primero(listaExistente)] ++ listaInvertida
         listaExistente := resto(listaExistente)
    }
    
     return (listaInvertida)
}

//Ejercicio 15 

//b
function sumatoriaDe_(unaLista){
    sumatoria := 0
    listaExistente := unaLista
    while (not esVacía(listaExistente)) {
        sumatoria :=  sumatoria + primero(listaExistente)
        listaExistente := resto(listaExistente)
    }
    
    return(sumatoria)
}

//c
function productoriaDe_(unaLista){
    listaExistente := unaLista
    productoria := primero(listaExistente)
    listaExistente := resto(listaExistente)
    
    while (not esVacía(listaExistente)) {
        
        productoria := productoria * primero(listaExistente)
        listaExistente := resto(listaExistente)
    }
    
    return(productoria)
}

//d
function direccionesOpuestasDe_(unaLista){
    listaDeOpuestos := []
    listaExistente := unaLista
    while (not esVacía(listaExistente)) {
        listaDeOpuestos := listaOpuestos ++ [opuesto(primero(listaExistente))] 
        listaExistente := resto(listaExistente)
    }
    return (listaDeOpuestos)
}

//e 
function siguientesDe_(unaLista){
    listaDeSiguientes := []
    listaExistente := unaLista
    while (not esVacía(listaExistente)) {
        listaDeSiguientes := listaDeSiguientes ++ [siguiente(primero(listaExistente))] 
        listaExistente := resto(listaExistente)
    }
    return (listaDeSiguientes)
}

//f
function elementosDe_multiplicadosPor_(unaLista, multiplicador){
    listaDeMultiplicados := []
    listaExistente := unaLista
    while (not esVacía(listaExistente)) {
        listaDeMultiplicados := listaDeMultiplicados ++ [multiplicador * primero(listaExistente)]
        listaExistente := resto(listaExistente)
    }
    return (listaDeMultiplicados)
}

//g
function númerosParesDe_(unaLista){
    listaDePares := []
    listaExistente := unaLista
    while(not esVacía(listaExistente)){
        if(primero(listaExistente) mod 2 == 0){
            listaDePares := listaDePares ++ [primero(listaExistente)]
        }
        listaExistente := resto(listaExistente)
    }
    return(listaDePares)
}

//h
function laLista_SinElElemento_(unaLista, elementoAEliminar){
    listaSinElemento := []
    listaExistente := unaLista
    while(not esVacía(listaExistente)){
        if(primero(listaExistente) /= elementoAEliminar){
            listaSinElemento := listaSinElemento ++ [primero(listaExistente)]
        }
        listaExistente := resto(listaExistente)
    }
    return(listaSinElemento)
}

//i
function losMayoresA_De_(umbral, unaLista){
    listaMayorAUmbral := []
    listaExistente := unaLista
    while(not esVacía(listaExistente)){
        if(primero(listaExistente) > umbral){
            listaMayorAUmbral := listaMayorAUmbral ++ [primero(listaExistente)]
        }
        listaExistente := resto(listaExistente)
    }
    return(listaMayorAUmbral)
}

//j
function contiene_A_(unaLista, unElemento){
    
    contiene := False
    listaExistente := unaLista
    while(not esVacía(listaExistente)){
        if(primero(listaExistente) == unElemento){
            contiene := True
        }
        listaExistente := resto(listaExistente)
    }
    
    return(contiene)
}


//Ejercicio 19
function sinDuplicados_(unaLista){
    
    listaSinDuplicados := []
    listaExistente := unaLista
    
    while(not esVacía(listaExistente)){
        
        if(not (contiene_A_(listaSinDuplicados,primero(listaExistente)))){
            
            listaSinDuplicados := listaSinDuplicados ++ [primero(listaExistente)]
        }
        
        listaExistente := resto(listaExistente)
    }
    
    return(listaSinDuplicados)
}

//Ejercicio 20
function posiciónDe_enLaQueAparece_(unaLista, elemento){
    listaExistente := unaLista
    posicionEnLaQueAparece := 0
    posicionActual := 0
    while(not esVacia(listaExistente) && ) {
        if (elemento /= sinElPrimero(primero(unaLista)){
            posicionActual + 1
            listaExistente := resto(unaLista)
        } else {
            posicionEnLaQueAparece := posicionActual
        }
    }
        
        return(posicionEnLaQueAparece)
    }
    
    
}

//Ejercicio 21

function  lista_estáIncluidaEn_(unaLista, otraLista){
    primeraLista := unaLista
    segundaLista := otraLista
    listaDeElementosIncluidos := []
    esListaIncluida := False
    
    while(not esVacía(primeraLista)){
        if(contiene_A_(segundaLista, primero(primeraLista))){
           listaDeElementosIncluidos := listaDeElementosIncluidos ++ [primero(primeraLista)] 
        }
        
        primeraLista := resto(primeraLista)
    }
    
    if(listaDeElementosIncluidos == unaLista){
        esListaIncluida := True
    }
    
    return(esListaIncluida)
}

//Ejercicio 22 

function intersecciónDe_Con_(unaLista,otraLista){
    primeraLista := unaLista
    segundaLista := otraLista
    listaDeInterseccion := []
    
    while(not esVacía(primeraLista)){
        
        if(contiene_A_(segundaLista, primero(primeraLista))){
           listaDeInterseccion := listaDeInterseccion ++ [primero(primeraLista)] 
        }
        
        primeraLista := resto(primeraLista)
    }
    
    return(listaDeInterseccion)
}

function unionDe_Con_(unaLista, otraLista){
    
    primeraLista := unaLista
    segundaLista := otraLista
    unionDeListas := [] ++ primeraLista
    
    while(not esVacía(segundaLista)){
        if(not contiene_A_(primeraLista, primero(segundaLista))){
           unionDeListas := unionDeListas ++ [primero(segundaLista)] 
        }
        
        segundaLista := resto(segundaLista)
    }
    return(unionDeListas)
}

//Ejercicio 23

function minimoElementoDe_(unaLista){
    listaExistente := unaLista
    minimoElemento := primero(listaExistente)
    while(not esVacía(listaExistente)){
        if(minimoElemento > primero(listaExistente)){
            minimoElemento := primero(listaExistente)
        }
        listaExistente := resto(listaExistente)
    }
    return(minimoElemento)
}

function sinElMínimoElemento_(unaLista){
    return(laLista_SinElElemento_(unaLista,minimoElementoDe_(unaLista)))
}

function lista_ordenada(unaLista){
    listaExistente := unaLista
    listaOrdenada := []
    while(not esVacía(listaExistente)){
        listaOrdenada := listaOrdenada ++ [minimoElementoDe_(listaExistente)]
        listaExistente := sinElMínimoElemento_(listaExistente)
    }
    return(listaOrdenada)
}

//Ejercicio 24

function maximoElementoDe_(unaLista){
    
    listaExistente := unaLista
    maximoElemento := primero(listaExistente)
    while(not esVacía(listaExistente)){
        if(maximoElemento < primero(listaExistente)){
            maximoElemento := primero(listaExistente)
        }
        listaExistente := resto(listaExistente)
    }
    return(maximoElemento) 
}

function sinElMáximoElemento_(unaLista){
    return(laLista_SinElElemento_(unaLista,maximoElementoDe_(unaLista)))
}