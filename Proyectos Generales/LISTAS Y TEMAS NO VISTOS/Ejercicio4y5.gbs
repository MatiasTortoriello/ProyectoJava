program{
   
    empleado1 := nuevaEmpleado("2","DAS",True,Operador,150)
    return(empleado_ConAumentoEn_PorBonoDeFinalizaciónDeProyecto(empleado1,20))
}





//Ejercicio 4
type Celda is record {
    /*
    PROPÓSITO: Modelar una celda del tablero
    INV.REP.: Los números son todos >=0
    */
    field cantidadDeAzules // tipo: Número
    field cantidadDeNegras // tipo: Número
    field cantidadDeRojas // tipo: Número
    field cantidadDeVerdes // tipo: Número
}

function tienenMismaCantidadDeRojas_Y_(primeraCelda,segundaCelda){
    return(cantidadDeRojas(primeraCelda) == cantidadDeRojas(segundaCelda))
}



function celdaActual(){
    return(Celda(cantidadDeAzules <- nroBolitas(Azul),
                cantidadDeNegras <- nroBolitas(Negro),
                cantidadDeRojas <- nroBolitas(Rojo),
                cantidadDeVerdes <- nroBolitas(Verde)))
}

function nuevaCelda(cantidadDeAzules,cantidadDeNegras,cantidadDeRojas,cantidadDeVerdes){
    return(
        Celda(cantidadDeAzules <- cantidadDeAzules,
                cantidadDeNegras <- cantidadDeNegras,
                cantidadDeRojas <- cantidadDeRojas,
                cantidadDeVerdes <- cantidadDeVerdes)
        )
}

procedure EscribirEnCelda_(unaCelda){
    
    repeat(cantidadDeAzules(unaCelda)){
        Poner(Azul)
    }
    repeat(cantidadDeNegras(unaCelda)){
        Poner(Negro)
    }
    repeat(cantidadDeRojas(unaCelda)){
        Poner(Rojo)
    }
    repeat(cantidadDeVerdes(unaCelda)){
        Poner(Verde)
    }
}



// Ejercicio 6
type Empleado is record{
    field dni // String
    field domicilio //String
    field esDonante // Booleano
    field puesto // Puesto
    field sueldo // Numero
}


function nuevaEmpleado(nuevoDni, nuevoDomicilio, nuevoEsDonante, nuevoPuesto,nuevoSueldo){
    return(
        Empleado(dni <- nuevoDni, domicilio <- nuevoDomicilio, esDonante <- nuevoEsDonante,
                 puesto <- nuevoPuesto, sueldo <- nuevoSueldo)
    )
}

type Puesto is variant {
    /*
    PROPÓSITO: Modelar los diferentes puestos que hay
    dentro de una empresa de software
    */
    case GestorDeProyecto {}
    case LiderDeProyecto {}
    case Desarrollador {}
    case Operador {}
}

function empleado_ConSueldoActualizadoA_(empleado, sueldoActualizado){
    return(Empleado(empleado | sueldo <- sueldoActualizado))
}

function empleado_ConNuevoPuesto_(empleado, puestoActualizado){
    return(Empleado(empleado | puesto <- puestoActualizado))
}

function categoríaDelPuesto_(puesto){
    return(
        choose 1 when (puesto == Operador)
               2 when (puesto == Desarrollador)
               3 when (puesto == LiderDeProyecto)
               4 otherwise
        )
}

function empleadoConMayorCargoEntre_Y_(primerEmpleado, segundoEmpleado){
    return(
        choose primerEmpleado when (categoríaDelPuesto_(puesto(primerEmpleado)) > categoríaDelPuesto_(puesto(segundoEmpleado)))
               segundoEmpleado otherwise
        )
}

function tienenIgualSueldo_Y_(primerEmpleado, segundoEmpleado){
    return(sueldo(primerEmpleado) == sueldo(segundoEmpleado))
}

function empleado_ConAumentoEn_PorBonoDeFinalizaciónDeProyecto(empleado,porcentaje){
    return(
        Empleado(empleado | sueldo <- (sueldo(empleado) + ((sueldo(empleado) * porcentaje) div 100))
        )
    )
}

function empleado_ConDomicilioActualizadoA_(empleado, domicilioAActualizar){
    return(Empleado(empleado | domicilio <- domicilioAActualizar))
}