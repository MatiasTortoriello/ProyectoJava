type Carta is record {
    /*
    Proposito: Representa una carta española.
    Inv.Rep.: el numero es un valor entre 1 y 12 inclusive.
    */
    field   numero  //Numero
    field   palo    //Palo
}

type Palo is variant{
    /*
    Proposito: representa un palo de una carta española. 
    */
    case    Espada  {}
    case    Oro     {}
    case    Copa    {}
    case    Basto   {}
}


function anchoDeEspadas(){
    /*
    Proposito: Describe la carta española 1 de Espada.
    Precondicion: Ninguna
    Tipo: Carta
    */
    return(Carta(numero <- 1, palo <- Espada))
}

function numeroDe_(unaCarta){
    /*
    Proposito: Describe el numero de *unaCarta*.
    Precondicion: Ninguna
    Parametros: *unaCarta* - Carta - es una carta española
    Tipo: Numero
    */
    return( numero(unaCarta) )
}

function paloDe_(unaCarta){
    /*
    Proposito: Describe el palo de *unaCarta*.
    Precondicion: Ninguna
    Parametros: *unaCarta* - Carta - es una carta española
    Tipo: Palo
    */
    return( palo(unaCarta) )
}

function carta_CambiadaACopa(unaCarta){
    /*
    Proposito: Describe la carta *unaCarta* con el palo cambiado a Copa.
    Precondicion: La carta *unaCarta* no es de Copa.
    Parametros: *unaCarta* - Carta - es una carta española
    Tipo: Carta
    */
    return( Carta( unaCarta | palo <- Copa)
          )
}

function cartaDePalo_YValor_(unPalo, unNumero){
    /*
    Proposito: Describe la carta española *numero* de *palo.
    Precondicion: Ninguna
    Tipo: Carta
    */
    return(Carta(numero <- unNumero, palo <- unPalo))
}

function sonDelMismoPalo_Y_(unaCarta, otraCarta){
    /*
    Proposito: Indica si *unaCarta* y *otraCarta* son del mismo palo.
    Precondicion: Ninguna
    Parametros: *unaCarta* - Carta - es una carta española
                *otraCarta* - Carta - es una carta española
    Tipo: Booleano
    */
    return(palo(unaCarta) == palo(otraCarta))
} 

program{
    return (carta_CambiadaACopa(cartaDePalo_YValor_(Oro, 5)))
}


type Empleado is record {
    /*
    Proposito: Representa una carta española.
    Inv.Rep.: el numero es un valor entre 1 y 12 inclusive.
    */
    field   identidad  //Persona
    field   puesto     //Puesto
    field   sueldo     //Numer
}

type Persona is record {
    /*
    Proposito: Representa una carta española.
    Inv.Rep.: el numero es un valor entre 1 y 12 inclusive.
    */
    field   nombre      //String
    field   dni         //String
    field   esDonante   //Booleano
}

