/*Ejercicio 1: Escribir el procedimiento ProvocarBajaDeTensiónDe_() que, dada una intensidad, disminuye la potencia de las torres y las señales en toda la región según el valor indicado. Si la potencia de la torre o la señal son menores que la baja de intensidad provocada, se disminuye todo lo que haya en esa celda. Se debe asumir que las señales están propagadas.*/
procedure ProvocarBajaDeTensiónDe_(intensidadABajar) {
    IrAPrimeraCeldaEnUnRecorridoAl_YAl_(Este, Norte)
    Bajar_TensiónAcáSiPuedo(intensidadABajar)
    while (haySiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte)) {
        IrASiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte)
        Bajar_TensiónAcáSiPuedo(intensidadABajar)
    }
}

procedure Bajar_TensiónAcáSiPuedo(intensidadABajar){
    if(puedoBajarTensiónAcá()){
        Bajar_DeTensión(intensidadABajar)
    }
}

procedure puedoBajarTensiónAcá() {
    return(hayTorreAcá() || haySeñalAcá())
}

procedure Bajar_DeTensión(cantidadDeTensiónABajar) {
    choose
        Bajar_DeIntensidadDeSeñal(cantidadDeTensiónABajar) when haySeñalAcá()
        Bajar_DePotenciaDeTorre(cantidadDeTensiónABajar) otherwise
    }
}

procedure Bajar_DeIntensidadDeSeñal(intensidad) {
    Sacar_DeColor_(intensidad, colorDeSeñal())
}

procedure Bajar_DePotenciaDeTorre(potencia) {
    Sacar_DeColor_(potencia, colorDeSeñal())
}


/*Ejercicio 2: Escribir la función esClienteRodeadoDeZonasMuertas() que indique si el cliente en la celda actual está rodeado de zonas muertas en sus celdas lindantes en sus direcciones ortogonales. Se considera zona muerta a aquella zona en la cual no hay torres y tampoco llega señal de ninguna de las mismas. La función realizada debe ser total. Se debe asumir que las señales están propagadas y que dicho cliente no está recibiendo ninguna.*/

function esClienteRodeadoDeZonasMuertas() {
    direccionActual := minDir()
    while (direccionActual /= maxDir() && not haySeñalOTorreAl_(direccionActual)) {
        direccionActual := siguiente(direccionActual)
    }
    return (not haySeñalOTorreAl_(direccionActual))
}

function haySeñalOTorreAl_(direccion) {
    if(puedeMover(direccion)){
        Mover(dirección)
    }   
    return (haySeñalOTorreAcá())
}

function haySeñalOTorreAcá() {
    return (haySeñalAcá() || hayTorreAcá())
}

/*Ejercicio 3: Escribir la función clientesRodeadosDeZonasMuertasSiHayBajaDeTensionDe_() que describa la cantidad de clientes que habrá rodeado de zonas muertas si hay una baja de tensión en una intensidad dada asumiento que ya hay señales propagadas. Se debe asumir que las señales están propagadas*/

function clientesRodeadosDeZonasMuertasSiHayBajaDeTensionDe_(tensionABajar){
    ProvocarBajaDeTensiónDe_(tensionABajar)
    IrAPrimeraCeldaEnUnRecorridoAl_YAl_(Este,Norte)
    cantidadDeClientesRodeadosDeZonasMuertas := unoSi_CeroSiNo(esClienteRodeadoDeZonasMuertas())
    while(haySiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_YAl_(Este, Norte)
        cantidadDeClientesRodeadosDeZonasMuertas := cantidadDeClientesRodeadosDeZonasMuertas + unoSi_CeroSiNo(esClienteRodeadoDeZonasMuertas())
    }
    return(cantidadDeClientesRodeadosDeZonasMuertas
}
