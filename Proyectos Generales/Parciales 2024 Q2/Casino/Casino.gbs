//TEMA 1
//Ejercicio 1

function hayGanador() {
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte) && not hayGanadorAcá()) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    return(hayGanadorAcá())
}

function hayGanadorAcá() {
    return(hayJugadorAcá() && esJugadorGanador())
}


function esJugadorGanador() {
    return(númeroAcá() == númeroGanador())
}

function númeroGanador() {
    IrACruppier()
    return(númeroAcá())
}

//Ejercicio 2

function dineroTotalQueSeLlevaránLosGanadores() {
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)
    cantidadVistos := dineroQueSeLlevaráGanadorAcáSiHay()
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
        cantidadVistos := cantidadVistos + dineroQueSeLlevaráGanadorAcáSiHay()
    }
    return(cantidadVistos)
}    

function dineroQueSeLlevaráGanadorAcáSiHay() {
    return(choose
             dineroAcá() * 3 when (hayGanadorAcá())
                    0 otherwise)
}

//Ejercicio 3

procedure Otorgar_DineroAlGanador(dinero) {
    idDeJugador := idDeJugadorAcá()
    Poner_DineroAcá(dinero)
    IrACruppier()
    Sacar_DineroACroupierSiTiene(dinero)
    IrAJugador_(idDeJugador)
}

procedure Sacar_DineroACroupierSiTiene(dineroASacar) {
    if(dineroAcá()>dineroASacar) {
        Sacar_DineroAcá(dineroASacar)
    } else {
        Sacar_DineroAcá(dineroAcá())
    }
} 

//Ejercicio 4

procedure OtorgarDineroAGanadores() {
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)) {
        OtorgarDineroAlGanadorAcáSiHay()
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }   
    OtorgarDineroAlGanadorAcáSiHay()
}

procedure OtorgarDineroAlGanadorAcáSiHay() {
    if(hayGanadorAcá()) {
        Otorgar_DineroAlGanador(dineroAcá()*3)
    }
}


//////////////////////////////////////////////////////////
/////               PRIMITIVAS                      //////
//////////////////////////////////////////////////////////

function colorJugador() {
    return(Azul)
}

function colorCruppier() {
    return(Negro)
}

function colorNúmero() {
    return(Rojo)
}

function colorDinero() {
    return(Verde)
}

function hayCruppierAcá() {
    return(hayBolitas(colorCruppier()))
}

function hayJugadorAcá() {
    return(hayBolitas(colorJugador()))
}

function dineroAcá() {
    return(nroBolitas(colorDinero()))
}

function idDeJugadorAcá() {
    return(nroBolitas(colorJugador()))
}

function númeroAcá() {
    return(nroBolitas(colorNúmero()))
}

procedure IrACruppier() {
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)
    while(not hayCruppierAcá()) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }    
}

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

//Ejercicio 1

function hayActitudSospechosa(){
    /*
        Prop:
            Indica si hay algún jugador en actitud sospechosa
            con el croupier.
        Prec.
            El cabezal se encuentra sobre el croupier
        Tipo:
            Bool
    */
    direcciónRecorrido := Norte
    while(direcciónRecorrido /= Oeste && not hayActitudSospechosaAl_(direcciónRecorrido)){
        direcciónRecorrido := siguiente(direcciónRecorrido)
    }
    return(hayActitudSospechosaAl_(direcciónRecorrido))
}

function hayActitudSospechosaAl_(dirección){
    /*
        Prop:
            Indica si hay un jugador con actitud sospecha 
            en la celda lindante dirección
        Prec:
            Debe haber dicha celda
        Parám:
            dirección: Dirección - La dirección en la que 
            se encuentra el jugador
    */
    nroCroupier := númeroAcá()
    nroJugador := 0
    Mover_Si_(dirección, puedeMover(dirección))
    if(hayJugadorAcá()){
        nroJugador:= númeroAcá()
    }
    return(nroCroupier == nroJugador)    
}

//Ejercicio 2

function cantidadDeDineroDePerdedores(){

    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    cantidadTotalDeDineroDePerdedores := cantidadDeDineroSiEsPerdedor()

    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
        cantidadTotalDeDineroDePerdedores := cantidadTotalDeDineroDePerdedores + cantidadDeDineroSiEsPerdedor()
    }
    return(cantidadTotalDeDineroDePerdedores)
}

function cantidadDeDineroSiEsPerdedor(){
    return(
        choose 
            dineroAca() when esPerdedor()
            0 otherwise
    )
}

function esPerdedor(){
    return(hayJugadorAca() && elJugadorPerdio())
    }

function elJugadorPerdio(){
    return(numeroAca() /= numeroGanador())
}

function numeroGanador(){
    IrACroupier()
    return(numeroAca())
}

procedure IrACroupier() {
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)
    while(not hayCroupierAcá()) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }    
}

//Ejercicio 3

procedure Otorgar_DineroAlCrupier(cantidadDeDineroEntregado){
    Sacar_DeDineroAca(cantidadDeDineroEntregado)
    IrACroupier()
    DarDineroAlCroupier(cantidadDeDineroEntregado)
}

procedure SacarDineroAca(cantidadDeDineroASacar) {    
    Sacar(dineroAca())
}

procedure DarDineroAlCroupier(dineroADar){
    Poner_DeColor_(dineroADar, colorDinero())
}

//Ejercicio 4

procedure TomarDineroDePerdedores(){
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    dineroSacadoALosPerdedores := cantidadDeDineroSiEsPerdedor()
    
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
        dineroSacadoALosPerdedores := dineroSacadoALosPerdedores + cantidadDeDineroSiEsPerdedor()
    }
    DarElDineroAlCroupier(dineroSacadoALosPerdedores)
}

procedure DarElDineroAlCroupier(dineroAEntregar){
    IrACroupier()
    DarDineroAlCroupier(dineroAEntregar)
}

