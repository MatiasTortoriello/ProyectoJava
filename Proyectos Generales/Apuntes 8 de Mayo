program {  
    SacarTodasLasDeColor_(Verde)
    
}

function coordenadaX(){
    /*
    Proposito: Describir la coordenada X que se corresponde a la celda actual
    Precondicion: Ninguna
    Tipo: Numero
    */
    
    return(distanciaAlBorde_(Oeste))
}

function distanciaAlBorde_(direccion){
	/*
	Proposito: Describe la distancia entre la celda actual y el borde *direccion*
	Precondicion: Ninguna
	Param: Direccion: La direccion a medir la distancia.
	Tipo: Numero
	*/
	
	contadorDeCeldas := 0
	while(puedeMover(direccion)){ //REVISAR ESTA FUNCION PARA BIBLIOTECA
	Mover(direccion)
	contadorDeCeldas := contadorDeCeldas+1	
	}
	return(
		contadorDeCeldas	
	)

}


function unoSi_CeroSiNo(condicion){ //Condicion es expresion booleana
/* Proposito: Describe un 1 si se verifica *condicion*
Preco: Ninguna
Param: *condicion*: Ser√° de tipo booleano
Tipo: Numero
*/    

return(
    choose
        1 when (condicion)
        0 otherwise
    )
}

// Recorridos sobre enumerativo
procedure PonerUnaDeCadaColor(){
    /*
    Proposito: poner una de c/color en la celda actual
    Prec: -
    */
    
    colorRecorrido := minColor() //azul
    Poner(colorRecorrido)
    while (colorRecorrido /= maxColor()){ //MaxColor == Verde
        colorRecorrido := siguiente(colorRecorrido)
        Poner(colorRecorrido)
    } 
    
    
}

procedure LimpiarCruzDeColor_(colorAQuitar){
    /* 
    Proposito: Limpiar de la cruz el color *colorAQuitar*
    Precondicion: El cabezal se encuentra en el centro de la cruz
    */
    
    SacarTodasLasDeColor_(colorAQuitar)
    
    direccionRecorrida := minDir() // minDir==Norte
    SacarColor_Hacia_(colorAQuitar, direccionRecorrida)
    while (direccionRecorrida /= maxDir()){ //maxDir==Oeste 
        SacarColor_Hacia_(colorAQuitar, direccionRecorrida)
        direccionRecorrida := siguiente(direccionRecorrida)
    }
}

procedure SacarColor_Hacia_(color, direccion){
    casillerosMovidos := 0
    SacarTodasLasDeColor_(color)
    while (puedeMover(direccion)){
        SacarTodasLasDeColor(color)
        casillerosMovidos := casillerosMovidos +1
    }
    Mover_VecesAl_(casillerosMovidos,opuesto (direccion)) //MoverVecesAl es de Biblioteca
}

//Ejercicio 29 Hacia la cual hay bolitas



//Ejercicio 30 Vecinas con Bolitas



