/*
paso 1      iniciar recorrido
paso 2      verificar si quedan elementos por recorrer
paso 3          procesarl el elemento actual
paso 4          pasar al siguiente elemento
paso 5      finalizar el recorrido


que tipo de recorrido?
-busqueda
    -busqueda parcial     (estoy seguro que lo que busco esta)
    -busqueda total   (no estoy seguro de encontrar lo que busco)
-acumulacion
-maximo/minimo
-transformacion (de procesamiento)


que quiero recorrer?  el tablero, una fila, una columna, colores, direcciones
como voy a recorrer?
*/



/*
Ejercicio #01) Escribir la función nivelDeDificultad que describe el nivel de dificultad del juego. 
El nivel de dificultad está dado por la cantidad de obstáculos que hay en el juego. 
No se conoce a priori el tamaño de la grilla de juego.

Para realizar esta tarea puede hacer uso de la siguiente primitiva:

function unoSi_CeroSino()
Propósito. Describe 1 en caso de cumplirse la condición dada, de lo contrario describe 0.
Precondición. Debe haber una ficha u obstaculo en la ubicación actual.
Param. Booleano. La condición a evaluar.
Tipo. Número.
*/
function nivelDeDificultad(){
    /*
    Proposito: Describe el nivel de dificultad del juego.
    Precondiciones: Ninguna
    Tipo: Numero
    Obs: El nivel de dificultad esta dado por la cantidad de obstaculos de la grilla.
    */
    return(cantidadDeObstaculosEnLaGrilla())
}

function cantidadDeObstaculosEnLaGrilla(){
    /*
    Proposito: Describe la cantidad de obstaculos de la grilla.
    Precondiciones: Ninguna
    Tipo: Numero
    Obs: El nivel de dificultad esta dado por la cantidad de obstaculos de la grilla.
         Recorrido de acumulacion sobre el tablero celda por celda.
    */
    IrAlInicioDeUnRecorridoAl_Y_(Este, Norte)
    cantidadObstaculos := unoSi_CeroSino(hayObstaculo())
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
        cantidadObstaculos := cantidadObstaculos + unoSi_CeroSino(hayObstaculo())
    }
    return(cantidadObstaculos)
}

funtion hayObstaculo(){
    /*
    Proposito: Indica si hay un obstaculo en la ubicacion actual
    Precondiciones: Ninguna
    Tipo: Booleano
    */ 
    return(nroBolitas(Negro) == 2)
}

/*
Ejercicio #02) Definir la función cantidadDeFichasCirculoEnEstaFila, que describe la cantidad de 
fichas círculo que hay en la fila donde está ubicado el cabezal.
*/
function cantidadDeFichasCirculoEnEstaFila(){
    /*
    Proposito: Describe la cantidad de ficha circulo que hay en la fila actual.
    Precondiciones: Ninguna
    Tipo: Numero
    Obs: es un recorrido de acumulacion sobre la fila actual celda por celda
    */  
    IrAlBorde(Oeste)
    cantidadDeCirculos := unoSi_CeroSino(hayCirculo())
    while(puedeMover(Este)){
        Mover(Este)
        cantidadDeCirculos := cantidadDeCirculos + unoSi_CeroSino(hayCirculo())
    }
    return(cantidadDeCirculos)
}

function hayCirculo(){
    /*
    Proposito: Indica si hay una ficha circulo en la ubicacion actual
    Precondiciones: Ninguna
    Tipo: Booleano
    */
    return(nroBolitas(Azul) == 2) /// && nroBolitas(Negro) == 1)
}

/*
Ejercicio #03) La función hayFichasExplotadas nos indica si en la grilla de juego existen fichas 
explotadas. Una ficha explotada queda representada por la ubicación vacía. ¡Cuidado! puede ocurrir 
que no hayan fichas explotadas.
*/

function hayFichasExplotadas(){
    /*
    Proposito: Indica si hay fichas explotadas en la grilla.
    Precondiciones: Ninguna
    Tipo: Booleano
    Obs: recorrido de busqueda sobre el tablero celda por celda, no se sabe si hay o 
         no fichas explotadas. las fichas explotadas se representan con una celda vacia.
    */ 
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Norte, Este)  //IrAPrimeraUbicacionDeLaGrilla()
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Norte, Este) && not esCeldaVacía()){  //hayFichaExplotada()
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Norte, Este)
    }
    return(esCeldaVacía())
}




































