function cantidadDePistasLibres(){
    /*
    PROPÓSITO: Describe la cantidad de pistas sin aviones
    PRECONDICIONES:
        *Ninguna
    TIPO: Número
    */
    IrAlBorde(Oeste)
    pistasLibres:= unoSi_CeroSino(not hayAviónEnPista())
    while(puedeMover(Este)){
        Mover(Este)
        pistasLibres := pistasLibres + unoSi_CeroSino(not hayAviónEnPista())
    }
    return(pistasLibres)
}

function hayAviónEnPista(){
     /*
    PROPÓSITO: Indica si en la pista hay al menos un avión
    PRECONDICIONES:
        *Ninguna
    TIPO: Booleano
    */
    IrAlBorde(Sur)
    while(puedeMover(Norte) && not hayAviónAcá()){
        Mover(Norte)
    }
    return(hayAviónAcá())
}

function hayAviónAcá(){
     /*
    PROPÓSITO: Indica si hay un avión en la ubicación actual
    PRECONDICIONES:
        *Ninguna
    TIPO: Booleano
    */
    return(hayBolitas(Azul))
}
function cantidadDeAvionesDespegando(){
    /*
    PROPÓSITO: Describe la cantidad de aviones del aeropuerto que está despegando
    PRECONDICIONES:
        *Ninguna
    TIPO: Número
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    avionesDespegando := unoSi_CeroSino(hayAviónDespegando())
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
        avionesDespegando := avionesDespegando + unoSi_CeroSino(hayAviónDespegando())
    }
    return(avionesDespegando)
}

function hayAviónDespegando(){
     /*
    PROPÓSITO: Indica si hay un avión en la ubicación actual despegando
    PRECONDICIONES:
        *Ninguna
    TIPO: Booleano
    */
    return(hayAviónAcá() && estáDespegando())
}
function estáDespegando(){
     /*
    PROPÓSITO: Indica si el avión en la ubicación actual está despegando
    PRECONDICIONES:
        *Debe haber un avión en la ubicación actual
    TIPO: Booleano
    */
    return(hayBolitas(Verde))
}

function coordenadaXConMásBolitas(){
    /*
    PROPÓSITO: Describe la coordenada x de la celda que contine mayor número de bolitas
    PRECONDICIONES:
        *Hay una única celda con el mayor número de bolitas
    TIPO: Número
    */
    IrALaCeldaDeMásBolitas()
    return(coordenadaX())
}
function coordenadaYConMásBolitas(){
    /*
    PROPÓSITO: Describe la coordenada y de la celda que contine mayor número de bolitas
    PRECONDICIONES:
        *Hay una única celda con el mayor número de bolitas
    TIPO: Número
    */
    IrALaCeldaDeMásBolitas()
    return(coordenadaY())
}
procedure IrALaCeldaDeMásBolitas(){
    /*
    PROPÓSITO: Lleva el cabezal a la celda que contiene más bolitas en el tablero
    PRECONDICIONES:
        *Hay una celda que tiene el mayor número de bolitas
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    while(not esLaCeldaDeMásBolitas()){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
}

function esLaCeldaDeMásBolitas(){
    /*
    PROPÓSITO: Inica si es la celda de mayor cantidad de bolitas en el tablero
    PRECONDICIONES:
        *Ninguna
    TIPO: Booleano
    */
    return(cantidadTotalBolitasAcá() == mayorCantidadBolitas()) 
}

function mayorCantidadBolitas(){
    /*
    PROPÓSITO: Describe la celda de mayor cantidad de bolitas en el tablero
    PRECONDICIONES:
        *Ninguna
    TIPO: Booleano
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    mayorCantidad := cantidadTotalBolitasAcá()
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
        mayorCantidad := máximoEntre_Y_(mayorCantidad, cantidadTotalBolitasAcá())
    }
    return(mayorCantidad)
}

/*
Escribir el procedimiento LimpiarCruzDeColor_ que dado un color limpia el dibujo de una cruz
realizado con bolitas de dicho color, bajo la suposición de que el cabezal se encuentra en el centro de
dicha cruz
*/
procedure LimpiarCruzDeColor_(color){
    /*
    PROPÓSITO: Limpia el dibujo de una cruz de color **color**
    PARÁMETROS:
        color: Color - El color de la cruz a limpiar
    PRECONDICIONES:
        *El cabezal debe estar en el centro de la cruz
    */
    LimpiarColor(color)
    dirección := minDir()
    cantidadVecina := unoSi_CeroSino(hayBolitasAl_Y_(dirección, sigui)
    LimpiarColor_Al_(color, dirección)
    while(dirección /= maxDir()){
        dirección := siguiente(dirección)
        LimpiarColor_Al_(color, dirección)
    }
    
}
procedure LimpiarColor_Al_(color, dirección){
    /*
    PROPÓSITO: Limpia el color **color** de la cruz hacia el **dirección**
    PARÁMETROS:
        color: Color - El color de la cruz a limpiar
        dirección: Dirección - La dirección hacia donde limpiar la cruz
    PRECONDICIONES:
        *El cabezal debe estar en el centro de la cruz
    */
    cantidadMovimientos := 0
    while(puedeMover(dirección)&&hayBolitasAl_(dirección){
        Mover(dirección)
        LimpiarColor(color)
        cantidadMovimientos := cantidadMovimientos + 1
    }
    Mover_VecesAl_(cantidadMovimientos, opuesto(dirección))
    
}

function cantidadDeVecinasConBolitas(){
    /*
    PROPÓSITO: Describe la cantidad de celdas vecinas con bolitas
    PRECONDICIONES:
        *Ninguna
    TIPO: Número
    */
    dirección := minDir()
    
    //mira hacia la dirección (hacia el norte)
    cantidadVecinas := unoSi_CeroSino(esCeldaConBolitasAl_(dirección)) 
    while(dirección /= maxDir()){
        
        //mira la diagonal ( en la primera hacia el norte-este)
        //En la segunda mira hacia la diagonal Este- Sur
        //mira la diagonal (Sur-Oeste)
        cantidadVecinas := cantidadVecinas + unoSi_CeroSino(esCeldaConBolitasAl_Y_(dirección, siguiente(dirección))
        
        //Actualiza la variable (en la primera pasa a Este)
        //en la segunda vuelve a actualizar (Sur)
        //Actualiza la variable (Oeste)
        dirección := siguiente(dirección)
        
        //mira hacia la dirección (este)
        //Mira para el sur
        //Mira al oeste
        cantidadVecinas := cantidadVecinas + unoSi_CeroSino(esCeldaConBolitasAl_(dirección)) 
    }
    
    cantidadVecinas := cantidadVecinas + unoSi_CeroSino(esCeldaConBolitasAl_Y_(dirección, siguiente(dirección))
    //retorna lo que tenía sumado a 1 si hay bolitas en la diagonal Oeste-Norte
    return(cantidadVecinas)
}
function esCeldaConBolitasAl_Y_(dirección, dirección2){
    //falta el contrato
    Mover(dirección)
    return(hayBolitasAl_(dirección2)
}


function cantidadDeVecinasConBolitas(){
    /*
    PROPÓSITO: Describe la cantidad de celdas vecinas con bolitas
    PRECONDICIONES:
        *Ninguna
    TIPO: Número
    */

    cantidadVecinas := unoSi_CeroSino(esCeldaConBolitasAl_(Norte)) 
    cantidadVecinas :=cantidadVecinas+ unoSi_CeroSino(esCeldaConBolitasAl_(Este)) 
    cantidadVecinas :=cantidadVecinas+ unoSi_CeroSino(esCeldaConBolitasAl_(Oeste)) 
    cantidadVecinas := cantidadVecinas+unoSi_CeroSino(esCeldaConBolitasAl_(Sur)) 
    cantidadVecinas := cantidadVecinas+unoSi_CeroSino(esCeldaConBolitasAl_Y_(Norte, Este)
    cantidadVecinas :=cantidadVecinas+ unoSi_CeroSino(esCeldaConBolitasAl_Y_(Norte, Oeste)
    cantidadVecinas :=cantidadVecinas + unoSi_CeroSino(esCeldaConBolitasAl_Y_(Sur, Este)
    cantidadVecinas :=cantidadVecinas + unoSi_CeroSino(esCeldaConBolitasAl_Y_(Sur, Oeste)
    
    return(cantidadVecinas )
}

function colorMásChicoDelCualHayBolitas(){
    /*
    PROPÓSITO: Describe el color de bolita más chico en la celda actual
    PRECONDICIONES:
        *Debe haber al menos un color de bolita
        *Debe haber un único color con la menor cantoidad de bolitas
    TIPO: Color
    */
    retrun(
        choose
            Negro when (esColorMenor_(Negro))
            Verde when (esColorMenor_(Verde))
            Azul when (esColorMenor_(Azul))
            Rojo otherwise
        )
}
function esColorMenor_(color){
    /*
    PROPÓSITO: Inica si el color **color** es el de menor cantidad (excluyendo los que no hay)
    PRECONDICIONES:
        *Ninguna
    TIPO: Booleano
    */
    
    return(hayBolitas(color) && 
    esColorMenor_Que_y_y_(
            color, siguiente(color), siguiente(siguiente(color)), siguinte(siguiente(siguiente(color))
        )
}

function esColorMenor_Que_y_y_(color1,color2,color3,color4 ){
    /*
    PROPÓSITO: Inidica si color1 es el de menor color de los que tiene bolitas
    PARÁMETROS:
        *color1 : el color a ver si es menor
        *color2 : el color a ver  
        *color3 : el color a ver 
        *color4 : el color a ver 
    PRECONDICIONES:
        *Debe haber bolitas del color 1
        
    TIPO: Booleano
    */
    return(
                              
        nroBolitas(color1) < nroBolitas_SiHay_MásUnoSiNoHay(color2, color1) &&
        nroBolitas(color1) < nroBolitas_SiHay_MásUnoSiNoHay(color3, color1) &&
        nroBolitas(color1) < nroBolitas_SiHay_MásUnoSiNoHay(color4, color1) 
        )
}
function nroBolitas_SiHay(color1, color2){
    return(
        choose
            nroBolitas(color2) when (hayBolitas(color2))
            nroBolitas(color1) +1 otherwise
        )
}
program{
    return(cantidadDeAvionesDespegando())
}





