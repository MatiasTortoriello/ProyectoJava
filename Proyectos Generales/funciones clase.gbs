function cantidadDeSoldadosDe_(colorDelEjército){
    /*
    PROPÓSITO:  Describe la cantidad de soldados de color **colorDelEjército** de la ubicación actual
    PARÁMETROS:
        colorDelEjército: Color- el color que representa el ejército
    PRECONDICIONES:
        *Ninguna
    TIPO: Número
    */
    return (nroBolitas(colorDelEjército))
}

procedure EnviarAliadosParaDuplicarEnemigos(){
    /*
    PROPÓSITO: Envía la cantidad de aliados necesarios hasta dupliar la cantidad de enemigos en la ubicación
    PRECONDICIONES:
        * La cantidad de soldados aliados debe ser menor al doble de enemigos       
    */
    Poner_Aliados(cantidadDeSoldadosDe_(enemigos())*2 - cantidadDeSoldadosDe_(aliados()))
}

function enemigos(){
    /*
    PROPÓSITO:  Describe el color de los soldados enemigos
    PRECONDICIONES:
        *Ninguna
    TIPO: Color
    */
    return(Rojo)
}
function aliados(){
    /*
    PROPÓSITO:  Describe el color de los soldados aliados
    PRECONDICIONES:
        *Ninguna
    TIPO: Color
    */
    return(Negro)
}

procedure Poner_Aliados(cantidad){
    /*
    PORPÓSITO: Pone **cantidad** de aliados en la ubicación actual
    PARÁMETROS:
        cantidad: Número - La cantidad de aliados a poner
    PRECONDICIONES:
        *Ninguna
    */
    Poner_DeColor_(cantidad, aliados())
}

procedure PelearLaBatalla(){
    /*
    PROPÓSITO: Simula una batalla.
    PRECONDICIONES:
        *Debe haber soldados aliados suficientes para ganar la batalla
    */
    Sacar_Solados_(cantidadDeSoldadosDe_(enemigos()*3 div 2, aliados())
    Sacar_Solados_(cantidadDeSoldadosDe_(enemigos()), enemigos())
}
function esCeldaIndefensa(){
    /*
    .....
    */
    return(cantidadDeSoldadosDe_(aliados())==0)
}
function estadoDeEmergencia(){
    /*
    ..........
    */
    return(cantidadDeSoldadosDe_(eneimgos())>=100 && esCeldaIndefensa() )
}








































































