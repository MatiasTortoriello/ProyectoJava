function contiene_A_(unaLista, unElemento) {
    /*
    PROPOSITO: Indica si el elemento esta en la lista
    PRECONDICION: Ninguna
    PARAMETROS: *unaLista* - Lista - Lista de elementos a verificar
                *unElemento* - Elemento de lista - Elemento a verificar en lista
    TIPO: Booleano
    */
    quedanVerificar := unaLista
    while (not esVacía(quedanVerificar) && primero(quedanVerificar) /= unElemento){
        quedanVerificar := resto(quedanVerificar) 
    }
    
   return (not esVacía(quedanVerificar) && primero(quedanVerificar) == unElemento)
 }

function elementoSi_estaEnLaLista_VacioSino(unElemento, unaLista) {
        /*
    PROPOSITO: Describe un elemento si el mismo se encuentra en la lista dada.
    PRECONDICION: Ninguna
    PARAMETROS: *unaLista* - Lista - Lista de elementos a verificar
                *unElemento* - Elemento de lista - Elemento a verificar en lista
    TIPO: Lista de elementos.
    */
    return (choose
            [unElemento] when (contiene_A_(unaLista, unElemento))
            [] otherwise
            )
}

function inserciónDe_Con_(unaLista, otraLista) {
    /*
    PROPOSITO: Dada una lista, devuelve una lista con los elementos que se encuentren en ambas.
    PRECONDICION: Ninguna
    PARAMETROS: *unaLista* - Lista - Lista de elementos a verificar
                *otraLista* - Lista - Lista de elementos a verificar
    TIPO: Booleano
    */
    listaARecorrer := unaLista
    listaDeIntersecciones := []
    
    while (not esVacía(listaARecorrer)) {
        listaDeIntersecciones := listaDeIntersecciones ++ elementoSi_estaEnLaLista_VacioSino(primero(listaARecorrer), otraLista)
        listaARecorrer := resto(listaARecorrer)
    }
    
    return (listaDeIntersecciones)
}


program {
    lista1 := [1, 2, 3, 4, 5]
    lista2 := [3, 4, 5, 6, 7]
    lista3 := [6, 7, 8, 9, 0]
    lista4 := []
    return (inserciónDe_Con_(lista1, lista2))
}