
program{
    return (
        
        )
}




procedure LimpiarCruzDeColor_(color){
    /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
SacarTodasLasDeColor_(color)
LimpiarCruzDeColorHacia_(direccion)

}



procedure LimpiarLaCruzDeColorHAcia_(direccion){
    /**/
direccionRecorrida := minDir
while (direccionRecorrida /= maxDir){
    LimpiarCruzDeColor_Hacia_(color, direccionRecorrida)
    direccionRecorrida := siguiente(direccionRecorrida)
}
Mover(opuesto(direccionRecorrida))


procedure LimpiarCruzDeColor_Hacia_(color, direccion){
pasos := 0
while (puedeMover(direccion)){
    Mover(direccion)
    SacarTodasLasDeColor_(color)
    pasos := pasos + 1
}
Mover_VecesAl_(pasos, opuesto(direccion))
}
















------------BIBLIOTECA------------
----------------------------------
procedure IrAPrimeraUbicacion(){
    /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
    IrAPrimerCeldaEnUnRecorridoAl_Y_(dirP, dirS)
}
procedure IrAPrimerCeldaEnUnRecorridoAl_Y_(dirP, dirS){
    /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
    IrAlBorde(opuesto(dirP))
    IrAlBorde(opuesto(dirS))
}
procedure IrASiguienteUbicacion(){
    /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
    IrASiguienteCeldaEnUnRecorridoAl_Y_(dirP, dirS)
    
}
procedure IrASiguienteCeldaEnUnRecorridoAl_Y_(dirP, dirS){
    /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
    if (puedeMover(dirP)) {
        Mover(dirP)
    } else {
        IrAlBorde(opuesto(dirP))
        Mover(dirS)
    }
}
procedure PonerUnaDeCadaColor(){
    /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
colorRecorrido := minColor()
while (colorRecorrido /= maxColor()){
    Poner(colorRecorrido)
    colorRecorrido := siguiente(colorRecorrido)
}
Poner(colorRecorrido)
//    Poner(Rojo)
//    Poner(Azul)
//    Poner(Verde)
//    Poner(Negro)
}
procedure VisitarVecinasOrtogonales(){
        /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
direccionRecorrida := minDir()
while (direccionRecorrida /= maxDir()){
    Mover(direccionRecorrida)
    Mover(opuesto(direccionRecorrida))
    direccionRecorrida := siguiente(direccionRecorrida)
}
Mover(direccionRecorrida)
Mover(opuesto(direccionRecorrida))
}
procedure VisitarVecinasDiagonales(){
        /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
direccionRecorrida := minDir()
while (direccionRecorrida /= maxDir()){
    Mover(direccionRecorrida)
    Mover(siguiente(direccionRecorrida))
    Mover(opuesto(direccionRecorrida))
    Mover(opuesto(siguiente(direccionRecorrida))
    direccionRecorrida := siguiente(direccionRecorrida)
}
Mover(direccionRecorrida)
Mover(siguiente(direccionRecorrida))
Mover(opuesto(direccionRecorrida))
Mover(opuesto(siguiente(direccionRecorrida))
}
procedure VaciarCelda(){
    /**/
    SacarTodasLasDeColor_(Rojo)
    SacarTodasLasDeColor_(Verde)
    SacarTodasLasDeColor_(Azul)
    SacarTodasLasDeColor_(Negro)
}
procedure SacarTodasLasDeColor_(colorASacar){
    /**/
    while (hayBolitas(colorASacar){
        Sacar(colorASacar)
    }
}
procedure LimpiarCruzDeColorHacia_(color){
    /**/
    SacarTodasLasDeColor_(colorASacar)
}
function esCeldaVacia(){
    /**/
    return(
        not (hayBolitas(Rojo) || hayBolitas(Azul) || hayBolitas(Verde) || hayBolitas(Negro))
        )
}
function haySiguienteUbicacion(){
        /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
    return(
        haySiguienteCeldaEnUnREcorridoAl_Y_(dirP, dirS)
        )
}
function haySiguienteCeldaEnUnREcorridoAl_Y_(dirP, dirS){
        /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
    return(
        puedeMover(dirP) || puedeMover(dirS)
        )
}
function nroFilas(){
    /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
    IrAPrimeraUbicacion()
    contadorFilas := 0
    while (haySiguienteUbicacion()){
        IrASiguienteUbicacion()
        contadorFilas := contadorFilas + 1
    }
    return(contadorFilas)
}
function nroColumnas(){
        /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
    IrAPrimeraUbicacion()
    contadorColumnas := 0
    while (haySiguienteUbicacion()){
        IrASiguienteUbicacion()
        contadorColumnas := contadorColumnas + 1
    }
    return(contadorColumnas)
}
function coordenadaX(){
    /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
    coordenadaX := 0
    while (puedeMover(Oeste)){
        Mover(Oeste)
        coordenadaX := coordenadaX + 1
    }
    return(coordenadaX)
}
function coordenadaY(){
   /*
    Prop:
    Prec:
    Param:
    Tipo:
    */
    coordenadaY := 0
    while (puedeMover(Sur)){
        Mover(Sur)
        coordenadaY := coordenadaY + 1
    }
    return(coordenadaY)
}
----------------------------------
----------------------------------