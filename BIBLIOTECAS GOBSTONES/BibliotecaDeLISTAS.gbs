/*
BIBLIOTECA (LISTAS) - PROGRAMACIÓN ESTRUCTURADA - UNAHUR - CUATRIMESTRE 1 - 2024
Por: Adriana Victoria Finoquetto

Aclaraciones:
1 - Las funciones realizadas pueden contener diversos errores ya que no todas fueron chequeadas por un/a
profesor/a, principalmente se pueden encontrar contratos incompletos/erróneos, tomenlo con cuidado.
2 - La biblioteca de este archivo consiste en los ejercicios 14 al 24 de la práctica 11 "Listas".
3 - Se reutilizan algunas funciones de la biblioteca completa (las que se encuentran en anteriores prácticas
de la materia). Revisar individualmente cada ejercicio ya que las mismas no están en este archivo.

*/

// FUNCIÓN EXTRA, la utilicé en varias ocasiones pero NO es parte de la biblioteca oficial.
function lista_ConcatenadaCon_SoloSi_(primerLista, elemento, condición) {
    /*
    PROPÓSITO: Concatena la lista *primeraLista* con el elemento *elemento* solo si se cumple
               la condición *condición*.
    PRECONDICIONES: Ninguna.
    PARÁMETROS: primerLista. Lista. Es la lista a concatenar.
                elemento. Elemento tipo (?). Es el elemento a concatenar.
                condición. Booleano. Es la condición de la cual se elegirá concatenar.
    TIPO: Lista.
    */
    return (
        choose
            primerLista ++ [elemento] when (condición)
            primerLista otherwise
        )
}

// EJ 14
function reversoDe_(unaLista) {
    /*
    PROPÓSITO: Describe la lista *unaLista* pero con el orden de sus elementos invertidos.
    PRECONDICIONES: Ninguna.
    PARÁMETROS: unaLista. Lista. Es la lista a invertir.
    TIPO: Lista.
    */
    
    listaEnReverso := []
    restoLista := unaLista
    while (not esVacía(restoLista)) {
        listaEnReverso := [primero(restoLista)] ++ listaEnReverso
        restoLista := resto(restoLista)
    }
    
    return(
        listaEnReverso
        )
    
}
// EJ 15
function longitudDe_(unaLista) {
    /*
    PROPÓSITO: Describe la cantidad de elementos (longitud) de la lista *unaLista*.
    PRECONDICIONES: Ninguna.
    PARÁMETROS: unaLista. Lista. Es la lista a describir su longitud.
    TIPO: Número.
    */
    
    contador := 0
    restoLista := unaLista
    while (not esVacía(restoLista)) {
        contador := contador + 1
        restoLista := resto(restoLista)
    }
    
    return(
        contador
        )
    
}
function sumatoriaDe_(unaLista) {
    /*
    PROPÓSITO: Describe la suma de todos los números de la lista númerica *unaLista*.
    PRECONDICIONES: La lista *unaLista* debe contener elementos tipo número.
    PARÁMETROS: unaLista. Lista. Es la lista a sumar.
    TIPO: Número.
    */
    
    restoLista := unaLista
    suma := 0
    while (not esVacía(restoLista)) {
        suma := suma + primero(restoLista)
        restoLista := resto(restoLista)
    }
    
    return(
        suma
        )
    
}
function productoriaDe_(unaLista) {
    /*
    PROPÓSITO: Describe el producto de todos los números de la lista númerica *unaLista*.
    PRECONDICIONES: La lista unaLista debe contener elementos tipo número.
    PARÁMETROS: unaLista. Lista. Es la lista a calcular el producto.
    TIPO: Número.
    */
    
    restoLista := unaLista
    producto := primero(unaLista)
    restoLista := resto(restoLista)
    while (not esVacía(restoLista)) {
        producto := producto * primero(restoLista)
        restoLista := resto(restoLista)
    }
    
    return(
        producto
        )
}
// EJ 16
function direccionesOpuestasDe_(unaLista) {
    /*
    PROPÓSITO: Describe la lista de direcciones *unaLista* pero con cada elemento "dirección"
               como su opuesto.
    PRECONDICIONES: La lista dada debe ser una lista de direcciones.
    PARÁMETROS: unaLista. Lista. Es la lista a describir sus direcciones opuestas.
    TIPO: Lista.
    */
    
    restoLista := unaLista
    listaDeDireccionesOpuestas := []
    while (not esVacía(restoLista)) {
         listaDeDireccionesOpuestas := listaDeDireccionesOpuestas ++ [opuesto(primero(restoLista))]
        restoLista := resto(restoLista)
    }
    
    return(
        listaDeDireccionesOpuestas
        )
    
}
function siguientesDe_(unaLista) {
    /*
    PROPÓSITO: Describe la lista de direcciones *unaLista* pero con cada elemento con su siguiente.
    PRECONDICIONES:
    PARÁMETROS: unaLista. Lista. Es la lista a describir sus siguientes.
    TIPO: Lista.
    */
    
    restoLista := unaLista
    listaDeSiguientes := []
    while (not esVacía(restoLista)) {
        listaDeSiguientes := listaDeSiguientes ++ [siguiente(primero(restoLista))]
        restoLista := resto(restoLista)
    }
    
    return(
        listaDeSiguientes
        )
    
}
function elementosDe_multiplicadosPor_(unaLista, unNúmero) {
    /*
    PROPÓSITO: Describe la lista númerica *unaLista* pero con cada elemento multiplicado por *unNúmero*.
    PRECONDICIONES: La lista dada debe ser con elementos de tipo número.
    PARÁMETROS: unaLista. Lista. Es la lista a describir.
    TIPO: Lista.
    */
    
    restoLista := unaLista
    listaMultiplicada := []
    while (not esVacía(restoLista)) {
        listaMultiplicada := listaMultiplicada ++ [unNúmero * primero(restoLista)]
        restoLista := resto(restoLista)
    }
    
    return(
        listaMultiplicada
        )
    
}
// EJ 17
function losMayoresA_De_(unNúmero, unaLista) {
    /*
    PROPÓSITO: Describe una lista *unaLista* pero solo con los elementos mayores a *unNúmero*.
    PRECONDICIONES: el elemento dado debe ser del mismo tipo que los elementos de unaLista
    PARÁMETROS: unaLista. Lista. Es la lista a verificar.
                unNúmero. Número. Es el número a ser de umbral en la lista.
    TIPO: Lista.
    */
    
    restoLista := unaLista
    listaConMayoresAlElemento := []
    while (not esVacía(restoLista)) {
        listaConMayoresAlElemento := lista_ConcatenadaCon_SoloSi_(listaConMayoresAlElemento, primero(restoLista), primero(restoLista) > unNúmero)
        restoLista := resto(restoLista)
    }
    
    return(
        listaConMayoresAlElemento
        ) 
    
}
function laLista_SinElElemento_(unaLista, unElemento) {
    /*
    PROPÓSITO: Describe una lista *unaLista* pero sin el elemento *unElemento* todas las veces que
               aparezca.
    PRECONDICIONES: el elemento dado debe ser del mismo tipo que los elementos de unaLista
    PARÁMETROS: unaLista. Lista. Es la lista a verificar.
                unElemento. Elemento x. Es el elemento a quitar de la lista.
    TIPO: Lista.
    */
    
    restoLista := unaLista
    listaSinElElemento := []
    while (not esVacía(restoLista)) {
        listaSinElElemento := lista_ConcatenadaCon_SoloSi_(listaSinElElemento, primero(restoLista), primero(restoLista) /= unElemento)
        restoLista := resto(restoLista)
    }
    
    return(
        listaSinElElemento
        )
    
}
function númerosParesDe_(unaLista) {
    /*
    PROPÓSITO: Describe una lista con los números pares de la lista númerica *unaLista*.
    PRECONDICIONES: unaLista debe tener elementos de tipo númerico.
    PARÁMETROS: unaLista. Lista. Es la lista a buscar sus números pares.
    TIPO: Lista.
    */

    listaDePares := []
    restoLista := unaLista
    while (not esVacía(restoLista)) {
        listaDePares := lista_ConcatenadaCon_SoloSi_(listaDePares, primero(restoLista), primero(restoLista) mod 2 == 0)
        restoLista := resto(restoLista)
    }
    
    return(
        listaDePares
        )

}
// EJ 18
// La función "contiene_A_" se suele reutilizar ocasionalmente en siguientes funciones.
function contiene_A_(unaLista, elemento) {
    /*
    PROPÓSITO: Indica si la lista *unaLista* contiene al elemento *elemento*.
    PRECONDICIONES: unaLista y elemento deben ser del mismo tipo.
    PARÁMETROS: *unaLista*. Lista. Es la lista donde se buscará un elemento.
                *elemento*. Elemento (?). Es el elemento que se buscará.
    TIPO: Booleano
    */
    
    quedanTodavía := unaLista
    while (not esVacía(quedanTodavía) && primero(quedanTodavía) /= elemento) {
        quedanTodavía := resto(quedanTodavía)
    }
    
    return(
        not esVacía(quedanTodavía)
        )
    
}
function algunoMayorQué_En(elemento, unaLista) {
    /*
    PROPÓSITO: Indica si en la lista dada, existe un elemento mayor a *elemento*
    PRECONDICIONES: unaLista y elemento deben ser del mismo tipo.
    PARÁMETROS: elemento
                unaLista
    TIPO: Booleano.
    */
    
    restoLista := unaLista
    while (not esVacía(restoLista) && primero(restoLista) <= elemento) {
        restoLista := resto(restoLista)
    }
    
    return(
        not esVacía(restoLista)
        ) 
    
}
function hayAlgunoDe_Entre_Y_(unaLista, unNúmero, otroNúmero) {
    /*
    PROPÓSITO: Indica si en la lista númerica hay uno o más números que se encuentren
               entre unNúmero y otroNúmero.
    PRECONDICIONES: unaLista debe ser de tipo número.
    PARÁMETROS: 
    TIPO: Booleano
    */
    
    restoLista := unaLista
    while (not esVacía(restoLista) && (primero(restoLista) <= unNúmero || primero(restoLista) >= otroNúmero)) {
        restoLista := resto(restoLista)
    }
    
    return(
        not esVacía(restoLista)
        ) 
    
}
function hayAlgúnElementoImparDe_(unaLista) {
    /*
    PROPÓSITO: Indica si hay algún elemento de la lista que sea impar.
    PRECONDICIONES: La lista debe ser númerica.
    PARÁMETROS: unaLista.
    TIPO: Booleano.
    */
    
    restoLista := unaLista
    while (not esVacía(restoLista) && primero(restoLista) mod 2 == 0) {
        restoLista := resto(restoLista)
    }
    
    return(
        not esVacía(restoLista)
        ) 
    
}
// EJ 19
function sinDuplicados_(unaLista) {
    /*
    PROPÓSITO: Describe la lista *unaLista* pero sin elementos duplicados, si los hubiera.
    PRECONDICIONES: 
    PARÁMETROS: unaLista.
    TIPO: Lista
    */
    
    restoLista := unaLista
    listaSinDuplicados := []
    while (not esVacía(restoLista)) {
        listaSinDuplicados := lista_ConcatenadaCon_SoloSi_(listaSinDuplicados, primero(restoLista),
        not contiene_A_(listaSinDuplicados, primero(restoLista)))
        restoLista := resto(restoLista)
    }
    
    return(
        listaSinDuplicados
        )
    
}
// EJ 20
function posiciónDe_enLaQueAparece_(unaLista, elemento) {
    /*
    PROPÓSITO: Describe la posición del elemento *elemento* que aparece en la lista.
    PRECONDICIONES: El elemento *elemento* debe estar en la lista *unaLista*.
    PARÁMETROS: unaLista.
                elemento.
    TIPO: Número.
    */
    
    restoLista := unaLista
    posición := 0
    while (not esVacía(restoLista) && primero(restoLista) /= elemento) {
        posición := posición + 1
        restoLista := resto(restoLista)
    }
    
    return(
        posición
        )
        
}
// EJ 21
function lista_estáIncluidaEn_(unaLista, otraLista) {
    /*
    PROPÓSITO: Indica si la lista *unaLista* está incluida dentro de *otraLista*.
    PRECONDICIONES: Ambas listas dadas por parámetro no deben incluir elementos repetidos.
    PARÁMETROS: unaLista.
                otraLista.
    TIPO: Booleano.
    */
    
    restoUnaLista := unaLista
    while (not esVacía(restoUnaLista) && contiene_A_(otraLista, primero(restoUnaLista))) {
        restoUnaLista := resto(restoUnaLista)
    }
    
    return(
        esVacía(restoUnaLista)
        )
        
}
// EJ 22
function uniónDe_Con_(primeraLista, segundaLista) {
    /*
    PROPÓSITO: Describe una lista con la unión de *primeraLista* y *segundaLista*, es decir, con todos los elementos
               que se encuentran en ambas listas, sin repetir los que se llegaran a encontrar en las dos.
    PRECONDICIONES: Ambas listas deben ser del mismo tipo.
                    Ambas listas no deben contener elementos repetidos.
    PARÁMETROS: primeraLista.
                segundaLista.
    TIPO: Lista.
    */
    
    restoLista := segundaLista
    listaConUnión := primeraLista
    while (not esVacía(restoLista)) {
        listaConUnión := lista_ConcatenadaCon_SoloSi_(listaConUnión, primero(restoLista), not contiene_A_(listaConUnión, primero(restoLista)))
        restoLista := resto(restoLista)
    }
    
    return(
        listaConUnión
        )
    
}
function intersecciónDe_Con_(primeraLista, segundaLista) {
    /*
    PROPÓSITO: Describe una lista con la intersección de *primeraLista* y *segundaLista*, es decir, con los elementos
               que se encuentran en ambas listas.
    PRECONDICIONES: Ambas listas deben ser del mismo tipo.
                    Ambas listas no deben contener elementos repetidos.
    PARÁMETROS: primeraLista.
                segundaLista.
    TIPO: Lista.
    */
    
    restoLista := primeraLista
    listaConIntersecciones := []
    while (not esVacía(restoLista)) {
        listaConIntersecciones := lista_ConcatenadaCon_SoloSi_(listaConIntersecciones, primero(restoLista), contiene_A_(segundaLista, primero(restoLista)))
        restoLista := resto(restoLista)
    }
    
    return(
        listaConIntersecciones
        )
        
}
// EJ 23
// Las malas prácticas pueden aparecer en estas tres funciones, se hizo lo que se pudo (?
function lista_ordenada(unaLista) {
    /*
    PROPÓSITO: Describe la lista *unaLista* pero de forma ordenada (menor a mayor).
    PRECONDICIONES: *unaLista* debe ser una lista de elementos tipo número.
    PARÁMETROS: unaLista.
    TIPO: Lista.
    */
    
    restoLista := unaLista
    listaSinElMínimo := unaLista
    listaOrdenada := []
    while (not esVacía(restoLista)) {
        listaOrdenada := listaOrdenada ++ [mínimoElementoDe_(listaSinElMínimo)]
        listaSinElMínimo := sinElMínimoElemento_(listaSinElMínimo)
        restoLista := resto(restoLista)
    }
    
    return(
        listaOrdenada
        )
    
}
function sinElMínimoElemento_(unaLista) {
    /*
    PROPÓSITO: Describe la lista *unaLista* pero sin el elemento mínimo.
    PRECONDICIONES: *unaLista* debe ser una lista de elementos tipo número.
    PARÁMETROS: unaLista.
    TIPO: Lista.
    OBSERVACIONES: En caso de repetirse el elemento mínimo, se elimina el primero que aparezca en la lista.
    */
    
    restoLista := unaLista
    listaSinElMínimoElemento := []
    while (not esVacía(restoLista) && mínimoElementoDe_(unaLista) /= primero(restoLista)) {
        listaSinElMínimoElemento := listaSinElMínimoElemento ++ [primero(restoLista)]
        restoLista := resto(restoLista)
    }
    listaSinElMínimoElemento := listaSinElMínimoElemento ++ resto(restoLista)
    
    return(
        listaSinElMínimoElemento
        )
    
}
function mínimoElementoDe_(unaLista) {
    /*
    PROPÓSITO: Describe el elemento tipo número más chico de la lista *unaLista*.
    PRECONDICIONES: *unaLista* debe ser una lista de elementos tipo número.
    PARÁMETROS: unaLista.
    TIPO: Número.
    */
    
    restoLista := unaLista
    mínimoElemento := primero(restoLista)
    while (not esVacía(restoLista)) {
        mínimoElemento := mínimoEntre_Y_(mínimoElemento, primero(restoLista))
        restoLista := resto(restoLista)
    }
    
    return(
        mínimoElemento
        )
    
}
// EJ 24
function sinElmáximoElemento_(unaLista) {
    /*
    PROPÓSITO: Describe la lista *unaLista* pero sin el elemento máximo.
    PRECONDICIONES: *unaLista* debe ser una lista de elementos tipo número.
    PARÁMETROS: unaLista.
    TIPO: Lista.
    OBSERVACIONES: En caso de repetirse el elemento máximo, se elimina el primero que aparezca en la lista.
    */
    
    restoLista := unaLista
    listaSinElMáximoElemento := []
    while (not esVacía(restoLista) && máximoElementoDe_(unaLista) /= primero(restoLista)) {
        listaSinElMáximoElemento := listaSinElMáximoElemento ++ [primero(restoLista)]
        restoLista := resto(restoLista)
    }
    listaSinElMáximoElemento := listaSinElMáximoElemento ++ resto(restoLista)
    
    return(
        listaSinElMáximoElemento
        )
    
}
function máximoElementoDe_(unaLista) {
    /*
    PROPÓSITO: Describe el elemento tipo número más grande de la lista *unaLista*.
    PRECONDICIONES: *unaLista* debe ser una lista de elementos tipo número.
    PARÁMETROS: unaLista.
    TIPO: Número.
    */
    
    restoLista := unaLista
    máximoElemento := primero(restoLista)
    while (not esVacía(restoLista)) {
        máximoElemento := máximoEntre_Y_(máximoElemento, primero(restoLista))
        restoLista := resto(restoLista)
    }
    
    return(
        máximoElemento
        )
    
}