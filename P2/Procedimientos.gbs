//P2 - Procedimientos:

/*1 - Iniciales:
Escribir un programa que ponga sus iniciales en el tablero usando bolitas color Verde para los nombres y color Rojo para el apellido, dejando el cabezal en la celda inicial. Para escribir sus iniciales, se debe definir cómo se verán las letras en el tablero.*/

program {
    DibujarIniciales()
}

procedure DibujarIniciales(){
    /*Propósito: Dibuja las iniciales del creador del código "M T" (Matías Tortoriello)
    Precondiciones:Debe haber al menos 5 casilleros libres hacia el norte y al menos 10 casilleros libres hacia el este (El Tablero debe ser mínimo de 10x5)*/

    DibujarLetraM()
    PosicionarseParaLetraT()
    DibujarLetraT()
    VolverAlInicio()
}

procedure DibujarLetraM(){
    /*Propósito: Dibuja la letra M de las iniciales "MT".
    Precondiciones: Debe haber al menos 5 casilleros libres hacia el norte y al menos 4 casilleros libres hacia el este */

    DibujarPaloIzquierdoDeLaM()
    DibujarDiagonalIzquierdaDeLaM()
    DibujarDiagonalDerechaDeLaM()
    DibujarPaloDerechoDeLaM()
}

procedure DibujarPaloIzquierdoDeLaM(){
    /*Propósito: Dibuja el palo izquierdo de la letra M
    Precondiciones: Debe haber al menos 5 casilleros libres al norte de la posición inicial*/
    
    Poner(Verde)
    Mover(Norte)
    Poner(Verde)
    Mover(Norte)
    Poner(Verde)
    Mover(Norte)
    Poner(Verde)
    Mover(Norte)
    Poner(Verde)
    Mover(Norte)
    Poner(Verde)
    
}

procedure DibujarDiagonalIzquierdaDeLaM(){
    /*Propósito: Dibuja la diagonal izquierda de la letra M
    Precondiciones: Debe haber al menos 2 casilleros libres al sur y 2 casilleros libres al este de la posición actual*/
    Mover(Sur)
    Mover(Este)
    Poner(Verde)
    Mover(Sur)
    Mover(Este)
    Poner(Verde)
}

procedure DibujarDiagonalDerechaDeLaM(){
    /*Propósito: Dibuja la diagonal derecha de la letra M
    Precondiciones: Debe haber al menos 2 casilleros libres al norte y 2 casilleros libres al este de la posición actual*/
    
    Mover(Norte)
    Mover(Este)
    Poner(Verde)
    Mover(Norte)
    Mover(Este)
    Poner(Verde)

}

procedure DibujarPaloDerechoDeLaM(){
    /*Propósito: Dibuja el palo derecho de la letra M
    Precondiciones: Debe haber al menos 5 casilleros libres al sur de la posición inicial*/
    Mover(Sur)
    Poner(Verde)
    Mover(Sur)
    Poner(Verde)
    Mover(Sur)
    Poner(Verde)
    Mover(Sur)
    Poner(Verde)
    Mover(Sur)
    Poner(Verde)
}

procedure PosicionarseParaLetraT(){
    /*Propósito: Se posiciona para dibujar la letra T luego de haber dibujado la letra M.
    Precondiciones:*/
    Mover(Este)
    Mover(Este)
    Mover(Este)
    Mover(Este)

}

procedure DibujarLetraT(){
    /*Propósito: Dibuja la letra T de las iniciales "MT"
    Precondiciones:*/

    DibujarPaloVerticalDeLaT()
    DibujarPaloHorizontalDeLaT()
}

procedure DibujarPaloVerticalDeLaT(){
    /*Propósito: Dibuja el palo vertical de la letra T
    Precondiciones: Debe haber al menos 5 casilleros libres al norte de la posición inicial*/
    
    Poner(Rojo)
    Mover(Norte)
    Poner(Rojo)
    Mover(Norte)
    Poner(Rojo)
    Mover(Norte)
    Poner(Rojo)
    Mover(Norte)
    Poner(Rojo)
    Mover(Norte)
    Poner(Rojo)

}

procedure DibujarPaloHorizontalDeLaT(){
    /*Propósito: Dibuja el palo horizontal de la letra T
    Precondiciones: Debe haber al menos 5 casilleros libres al norte de la posición inicial*/

    DibujarParteIzquierdaDelPaloHorizontalDeLaLetraT()
    DibujarParteDerechaDelPaloHorizontalDeLaLetraT()
    
}

procedure DibujarParteIzquierdaDelPaloHorizontalDeLaLetraT(){
    /*Propósito: Dibuja la parte izquierda del palo horizontal de la letra T
    Precondiciones: Debe haber al menos 5 casilleros libres al norte de la posición inicial*/
    Mover(Oeste)
    Poner(Rojo)
    Mover(Oeste)
    Poner(Rojo)
}

procedure DibujarParteDerechaDelPaloHorizontalDeLaLetraT(){
    /*Propósito: Dibuja la parte derecha del palo horizontal de la letra T
    Precondiciones: Debe haber al menos 5 casilleros libres al norte de la posición inicial*/
    Mover(Este)
    Mover(Este)
    Mover(Este)
    Poner(Rojo)
    Mover(Este)
    Poner(Rojo)
}

procedure VolverAlInicio(){
    Mover(Sur)
    Mover(Sur)
    Mover(Sur)
    Mover(Sur)
    Mover(Sur)
    Mover(Oeste)
    Mover(Oeste)
    Mover(Oeste)
    Mover(Oeste)
    Mover(Oeste)
    Mover(Oeste)
    Mover(Oeste)
    Mover(Oeste)
    Mover(Oeste)
    Mover(Oeste)
}

/*2 - Por Arriba:
Realizar cada uno de los siguientes puntos, en el orden dado (siguiendo una metolodía top-down):

a) Escribir un procedimiento DibujarRectánguloRojoYNegroDe5x3()*/

program {
    DibujarRectánguloRojoYNegroDe5x3()
    RegresarAInicio()
}

procedure DibujarRectánguloRojoYNegroDe5x3() {
    /*
        PROPÓSITO: Poner un rectángulo sólido de 5 celdas de ancho y 3 celdas de alto, en la que cada celda tenga una bolita de color Rojo y una de color Negro. El cabezal comienza y termina en el vértice inferior izquierda del mismo.
        PARÁMETROS:
            * -
        PRECONDICIONES:
            * Hay al menos 4 celdas al Este y 2 celdas al Norte de la celda actual.
    */

    DibujarLíneaRojaYNegraDeTamaño5()
    Mover4VecesAlOeste()
    Mover(Norte)
    DibujarLíneaRojaYNegraDeTamaño5()
    Mover4VecesAlOeste()
    Mover(Norte)
    DibujarLíneaRojaYNegraDeTamaño5()
    Mover4VecesAlOeste()
}

/*b) Escribir el procedimiento DibujarLíneaRojaYNegraDeTamaño5() que quedó pendiente del ítem anterior.
Para ello, se debe seguir la misma metodología que en el caso anterior: en primer lugar pensar una estrategia, luego definir los contratos de los procedimientos que expresan las subtareas, y por último codificar el procedimiento pedido usando dichas subtareas (sin su código). Se sugiere que la estrategia involucre a subtareas llamadas PonerUnaNegraYUnaRoja() y Mover4VecesAlOeste().*/

procedure DibujarLíneaRojaYNegraDeTamaño5() {
    PonerUnaNegraYUnaRoja()
    Mover(Este)
    PonerUnaNegraYUnaRoja()
    Mover(Este)
    PonerUnaNegraYUnaRoja()
    Mover(Este)
    PonerUnaNegraYUnaRoja()
    Mover(Este)
    PonerUnaNegraYUnaRoja()
}

/*c) Escribir los procedimientos PonerUnaNegraYUnaRoja() y Mover4VecesAlOeste() que quedaron pendientes del ejercicio anterior. En este caso, los procedimientos se pueden expresar fácilmente utilizando comandos primitivos, por lo que no es necesario comenzar pensando en posibles subtareas.*/
procedure PonerUnaNegraYUnaRoja() {
    Poner(Rojo)
    Poner(Negro)
}

procedure Mover4VecesAlOeste() {
    Mover(Oeste)
    Mover(Oeste)
    Mover(Oeste)
    Mover(Oeste)
}

procedure RegresarAInicio() {
    IrAlBorde(Oeste)
    IrAlBorde(Sur)
}


/*3 - Por abajo: En el ejercicio anterior se trabajó con una metodología conocida como top-down: se comienza desde el problema, y se lo va descomponiendo en tareas cada vez más pequeñas, hasta llegar al uso de comandos primitivos. En este ejercicio vamos a proponer la estrategia inversa, bottom-up: primero se escriben los procedimientos elementales, y luego se van armando procedimientos cada vez más complejos, hasta construir uno que resuelva el problema original.
Escribir los siguientes procedimientos en el orden dado. Recuerde escribir los contratos correspondientes.*/

/*a) BIBLIOTECA. PonerUnaDeCada() que ponga una bolita de cada color en la celda actual.*/

procedure PonerUnaDeCada() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    Poner(Azul)
    Poner(Negro)
    Poner(Rojo)
    Poner(Verde)
    
}
/*b) Mover3VecesAlOeste() que mueva el cabezal tres celdas hacia el Oeste.*/

procedure Mover3VecesAlOeste() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */
    Mover(Oeste)
    Mover(Oeste)
    Mover(Oeste)
    
}
/*c) DibujarLíneaMulticolorDeLargo4() que ponga una línea de cuatro celdas hacia el Este en la que cada celda tenga una bolita de cada color. El cabezal debe quedar en la celda inicial. Para ello, debe reutilizar los procedimientos PonerUnaDeCada() y Mover3VecesAlOeste() (realizados en ejercicios anteriores).*/

procedure DibujarLineaMulticolorDeLargo4() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */

    Poner(Azul)
    Mover(Este)
    Poner(Negro)
    Mover(Este)
    Poner(Rojo)
    Mover(Este)
    Poner(Verde)
}

/*d) DibujarCuadradoMulticolorDeLado4() que ponga un cuadrado sólido de 4 × 4 celdas en la que cada celda tenga una bolita de cada color. El cabezal debe quedar en la celda inicial. Para ello, debe reutilizar el procedimiento DibujarLíneaMulticolorDeLargo4().*/

procedure DibujarCuadradoMulticolorDeLado4() {
    /*
        PROPÓSITO:  ....
        PARÁMETROS:
            * parámetro1: tipo - descripción.
            * parámetro2: tipo - descripción.
        PRECONDICIONES:
            * ....
    */

    Poner(Azul)
    Mover(Norte)
    Poner(Negro)
    Mover(Este)
    Poner(Rojo)
    Mover(Sur)
    Poner(Verde)
    Mover(Oeste)
    
}

/*4 - Guarda de azulejos:
Construir un procedimiento PonerGuardaDe5Azulejos(), que arme una “guarda” de 5 azulejos (como las que decoran las paredes). Cada azulejo está conformado por 1 bolita verde, 5 negras y 9 rojas. 

Recordar seguir una metodología adecuada para la construcción del código: COMENZAR por escribir el contrato completo del procedimiento, luego pensar las subtareas necesarias y darles un nombre adecuado, escribir el contrato de las subtareas, LUEGO el código del procedimiento pedido en términos de las subtareas, y FINALMENTE, realizar el código de las subtareas siguiendo la misma metodología (que denominamos metodología de construcción de programas top-down).*/

/*5 - En Papel*/

/*6 - En Papel*/

/*7 - En Papel*/

/*8 - El bosque - Parte 1:
En este ejercicio, se usará el tablero para representar un bosque. Cada celda representa a una parcela. Cada bolita verde representa un árbol. Cada bolita roja representa una semilla. Una bolita negra representa una bomba. Una bolita azul representa una unidad de nutrientes.

Escribir los siguientes procedimientos de representación, que hacen lo que su nombre indica. Todos trabajan siempre sobre la celda actual:

-PonerUnaSemilla()
-PonerUnÁrbol()
-PonerUnaBomba()
-PonerUnNutriente()
-SacarUnaSemilla()
-SacarUnÁrbol()
-SacarUnaBomba()
-SacarUnNutriente()*/

procedure PonerUnaSemilla(){
    Poner(Rojo)
}

procedure PonerUnArbol(){
    Poner(Verde)
}

procedure PonerUnNutriente(){
    Poner(Azul)
}

procedure PonerUnaBomba(){
    Poner(Negro)
}

/////

procedure SacarUnaSemilla(){
    Sacar(Rojo)
}

procedure SacarUnArbol(){
    Sacar(Verde)
}

procedure SacarUnNutriente(){
    Sacar(Azul)
}

procedure SacarUnaBomba(){
    Sacar(Negro)
}

/*9 - Reloj Analógico Simplificado:

Dibujar un reloj analógico de agujas en un tablero cuadriculado puede ser un desafío. Una simplificación posible sería representar solamente algunos de los números que aparecen en el mismo: el 12 arriba, el 3 a la derecha, el 9 a la izquierda y el 6 abajo.
Construir un procedimiento DibujarRelojAnalógicoSimplificado(), que ponga los números del reloj tal como se indicó, alrededor del casillero actual. El tamaño del reloj será de 2 celdas de “radio” (suponiendo que miramos al reloj como un círculo).
Utilizar el comando DibujarRelojAnalógicoSimplificado() en un tablero inicial vacío de 5x5 con la celda inicial en el centro del mismo.*/

program{
    DibujarReloj()
}

procedure DibujarReloj(){

    MoverArriba()
    PonerLaHora12()
    MoverAlCentroDesdeArriba()
    MoverALaDerecha()
    PonerLaHora3()
    MoverAlCentroDesdeLaDerecha()
    MoverAbajo()
    PonerLaHora6()
    MoverAlCentroDesdeAbajo()
    MoverAlaIzquierda()
    PonerLaHora9()
    MoverALaDerecha()
}

procedure MoverArriba(){
    repeat(2){
        Mover(Norte)
    }
}

procedure MoverAlCentroDesdeArriba(){
    repeat(2){
        Mover(Sur)
    }
}

procedure MoverALaDerecha(){
    repeat(2){
        Mover(Este)
    }
}

procedure MoverAlCentroDesdeLaDerecha(){
    repeat(2){
        Mover(Oeste)
    }
}

procedure MoverAbajo(){
    repeat(2){
        Mover(Sur)
    }
}

procedure MoverAlCentroDesdeAbajo(){
    repeat(2){
        Mover(Norte)
    }
}

procedure MoverAlaIzquierda(){
    repeat(2){
        Mover(Oeste)
    }
}
procedure MoverAlCentroDesdeLaIzquierda(){
    repeat(2){
        Mover(Este)
    }
}

procedure PonerLaHora12{
    repeat(12){
        Poner(Rojo)
    }
}

procedure PonerLaHora9{
    repeat(9){
        Poner(Rojo)
    }
}

procedure PonerLaHora3{
    repeat(3){
        Poner(Rojo)
    }
}

procedure PonerLaHora6{
    repeat(6){
        Poner(Rojo)
    }
}

////9 DE FORMA EFICIENTE

program{
    DibujarReloj()
}

procedure DibujarReloj(){
    MoverArriba()
    PonerLaHora12()
    repeat(2){
        MoverAbajo()
    }
    PonerLaHora6()
    MoverArriba()
    MoverALaDerecha()
    PonerLaHora3()
    repeat(2){
        MoverAlaIzquierda()
    }
    
    PonerLaHora9()
    MoverALaDerecha()
}

procedure MoverArriba(){
    repeat(2){
        Mover(Norte)
    }
}


procedure MoverALaDerecha(){
    repeat(2){
        Mover(Este)
    }
}


procedure MoverAbajo(){
    repeat(2){
        Mover(Sur)
    }
}


procedure MoverAlaIzquierda(){
    repeat(2){
        Mover(Oeste)
    }
}


procedure PonerLaHora12(){
    repeat(12){
        Poner(Rojo)
    }
}

procedure PonerLaHora9(){
    repeat(9){
        Poner(Rojo)
    }
}

procedure PonerLaHora3(){
    repeat(3){
        Poner(Rojo)
    }
}

procedure PonerLaHora6(){
    repeat(6){
        Poner(Rojo)
    }
}

//Programa 9 (CON PARAMETROS Y REPEAT)

program{
 DibujarReloj()
}

procedure DibujarReloj(){
Ir_VecesAl_(2, Norte)
Poner_BolitasDeColor_(12, Rojo)
Ir_VecesAl_(2, Sur)
Ir_VecesAl_(2, Este)
Poner_BolitasDeColor_(3, Rojo)
Ir_VecesAl_(2, Oeste)
Ir_VecesAl_(2, Sur)
Poner_BolitasDeColor_(6, Rojo)
Ir_VecesAl_(2, Norte)
Ir_VecesAl_(2, Oeste)
Poner_BolitasDeColor_(9, Rojo)
Ir_VecesAl_(2, Este)

}

procedure Ir_VecesAl_(cantidad, direccion){
    repeat(cantidad){
        Mover(direccion)
    }
}

procedure Poner_BolitasDeColor_(cantidad, color){
    repeat(cantidad){
        Poner(color)
    }
}

/*10 - En Papel*/