program {  
    return(colorDeMaximoDeBolitas())
}

function coordenadaX(){
    /*
    Proposito: Describir la coordenada X que se corresponde a la celda actual
    Precondicion: Ninguna
    Tipo: Numero
    */
    
    return(distanciaAlBorde_(Oeste))
}

function distanciaAlBorde_(direccion){
	/*
	Proposito: Describe la distancia entre la celda actual y el borde *direccion*
	Precondicion: Ninguna
	Param: Direccion: La direccion a medir la distancia.
	Tipo: Numero
	*/
	
	contadorDeCeldas := 0
	while(puedeMover(direccion)){ //REVISAR ESTA FUNCION PARA BIBLIOTECA
	Mover(direccion)
	contadorDeCeldas := contadorDeCeldas+1	
	}
	return(
		contadorDeCeldas	
	)

}


function unoSi_CeroSiNo(condicion){ //Condicion es expresion booleana
/* Proposito: Describe un 1 si se verifica *condicion*
Preco: Ninguna
Param: *condicion*: Será de tipo booleano
Tipo: Numero
*/    

return(
    choose
        1 when (condicion)
        0 otherwise
    )
}

// Recorridos sobre enumerativo
procedure PonerUnaDeCadaColor(){
    /*
    Proposito: poner una de c/color en la celda actual
    Prec: -
    */
    
    colorRecorrido := minColor() //azul
    Poner(colorRecorrido)
    while (colorRecorrido /= maxColor()){ //MaxColor == Verde
        colorRecorrido := siguiente(colorRecorrido)
        Poner(colorRecorrido)
    } 
    
    
}

procedure LimpiarCruzDeColor_(colorAQuitar){
    /* 
    Proposito: Limpiar de la cruz el color *colorAQuitar*
    Precondicion: El cabezal se encuentra en el centro de la cruz
    */
    
    SacarTodasLasDeColor_(colorAQuitar)
    
    direccionRecorrida := minDir() // minDir==Norte
    SacarColor_Hacia_(colorAQuitar, direccionRecorrida)
    while (direccionRecorrida /= maxDir()){ //maxDir==Oeste 
        SacarColor_Hacia_(colorAQuitar, direccionRecorrida)
        direccionRecorrida := siguiente(direccionRecorrida)
    }
}

procedure SacarColor_Hacia_(color, direccion){
    casillerosMovidos := 0
    SacarTodasLasDeColor_(color)
    while (puedeMover(direccion)){
        SacarTodasLasDeColor(color)
        casillerosMovidos := casillerosMovidos +1
    }
    Mover_VecesAl_(casillerosMovidos,opuesto (direccion)) //MoverVecesAl es de Biblioteca
}

//Ejercicio 29 Hacia la cual hay bolitas

 function direccionHaciaLaCualHayBolitasDe_(colorABuscar){
     direccionGuardada := Norte
     while(not hayBolitas_Hacia_El_(direccionGuardada, colorABuscar)){
         direccionGuardada := siguiente(direccionGuardada)
     }
     
     return(direccionGuardada)
 }
//////////////////////////////////
function hayBolitas_HaciaEl_(color, direccion){
    /*
    Prop: Indica si hay bolitas de color *color* hacia, sin tener en cuenta la celda actual
    Prec: Ninguna
    Param: *completar*
    Tipo: Booleano
    
    */
	while(not hayBolitasAl_(direccion)){
		Mover(direccion)
	}
return ( hayBolitasAl_(direccion))
}
////////////////////////////
function hayBolitasAl_(direccion){
    return(
        puedeMover(direccion) && tieneBolitasAl_(direccion)
        )
}
//////////////////////////
function tieneBolitasAl_(direccion){
    Mover(direccion)
    
    return(
        hayBolitas()
        )
}


//Ejercicio 30 Vecinas con Bolitas


//Recorridos máximos y mínimos:

function maximoDeBolitasAzules(){
    
    numeroMaximoDeBolitasEncontradas := nroBolitas(Azul)
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)){
        
       IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)  
       numeroMaximoDeBolitasEncontradas := maximoEntre_Y_(numeroMaximoDebolitasEncontradas, nroBolitas(Azul))
       //Procesamiento
    }
    //Procesamiento
    return(numeroMaximoDeBolitasEncontradas)
}

function maximoEntre_Y_(num1, num2) { //Biblioteca!
    return (choose
                num1 when (num1>num2)
                num2 otherwise  
            )
}

//Que describa el color correspondiente al maximo de bolitas que se encontraron:
function colorDeMaximoDeBolitas(){
    /* Prop: Describe el color del maximo de bolitas que se encontró en la celda actual
       Tipo: Color
    */
    colorGuardado := minColor()
    maximo := nroBolitas(colorGuardado)
    colorMaximo := minColor()
    while(colorGuardado /= Verde){
        colorGuardado := siguiente(colorGuardado)
        maximo := maximoEntre_Y_(maximo, nroBolitas(colorGuardado))
        colorMaximo := choose colorGuardado when(nroBolitas(colorGuardado) > nroBolitas(colorMaximo))
                               colorMaximo otherwise
    }
    return (colorMaximo)
}
//////////// HACER BOSQUE (5 PARTES) - HACER GUBER - HACER PACMAN  - PRACTICA 9 (28 a 30 - 39)
/**/
